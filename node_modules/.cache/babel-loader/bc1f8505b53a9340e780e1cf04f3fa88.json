{"ast":null,"code":"import { createReducer } from \"@reduxjs/toolkit\";\nimport { getCurrentWeather, getCurrentLocation, getForecast } from \"./appThunk\";\nconst initialState = {\n  savedCities: [],\n  actualLocation: {},\n  currentWeather: {},\n  hasFetched: false,\n  isFetching: false,\n  isFetchingError: null\n};\nconst appReducer = createReducer(initialState, {\n  [getCurrentWeather.pending]: state => {\n    state.isFetching = true;\n    return state;\n  },\n  [getCurrentWeather.rejected]: (state, action) => {\n    state.isFetching = false;\n    state.error = action.error.message;\n    return state;\n  },\n  [getCurrentWeather.fulfilled]: (state, action) => {\n    state.isFetching = false;\n    state.hasFetched = true;\n    state.currentWeather = action.payload;\n    return state;\n  },\n  [getCurrentLocation.fulfilled]: (state, action) => {\n    state.actualLocation = action.payload;\n    return state;\n  }\n});\nexport default appReducer;","map":{"version":3,"sources":["C:/dev/react/weather_spa/src/app/appReducer.js"],"names":["createReducer","getCurrentWeather","getCurrentLocation","getForecast","initialState","savedCities","actualLocation","currentWeather","hasFetched","isFetching","isFetchingError","appReducer","pending","state","rejected","action","error","message","fulfilled","payload"],"mappings":"AAAA,SAAQA,aAAR,QAA4B,kBAA5B;AACA,SAAQC,iBAAR,EAA2BC,kBAA3B,EAA+CC,WAA/C,QAAiE,YAAjE;AAIA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,WAAW,EAAE,EADM;AAEnBC,EAAAA,cAAc,EAAE,EAFG;AAGnBC,EAAAA,cAAc,EAAE,EAHG;AAInBC,EAAAA,UAAU,EAAE,KAJO;AAKnBC,EAAAA,UAAU,EAAE,KALO;AAMnBC,EAAAA,eAAe,EAAE;AANE,CAArB;AASA,MAAMC,UAAU,GAAGX,aAAa,CAACI,YAAD,EAAe;AAC7C,GAACH,iBAAiB,CAACW,OAAnB,GAA8BC,KAAD,IAAW;AACtCA,IAAAA,KAAK,CAACJ,UAAN,GAAmB,IAAnB;AACA,WAAOI,KAAP;AACD,GAJ4C;AAK7C,GAACZ,iBAAiB,CAACa,QAAnB,GAA8B,CAACD,KAAD,EAAQE,MAAR,KAAmB;AAC/CF,IAAAA,KAAK,CAACJ,UAAN,GAAmB,KAAnB;AACAI,IAAAA,KAAK,CAACG,KAAN,GAAcD,MAAM,CAACC,KAAP,CAAaC,OAA3B;AACA,WAAOJ,KAAP;AACD,GAT4C;AAU7C,GAACZ,iBAAiB,CAACiB,SAAnB,GAA+B,CAACL,KAAD,EAAQE,MAAR,KAAmB;AAChDF,IAAAA,KAAK,CAACJ,UAAN,GAAmB,KAAnB;AACAI,IAAAA,KAAK,CAACL,UAAN,GAAmB,IAAnB;AACAK,IAAAA,KAAK,CAACN,cAAN,GAAwBQ,MAAM,CAACI,OAA/B;AACA,WAAON,KAAP;AACD,GAf4C;AAgB7C,GAACX,kBAAkB,CAACgB,SAApB,GAAgC,CAACL,KAAD,EAAQE,MAAR,KAAmB;AACjDF,IAAAA,KAAK,CAACP,cAAN,GAAuBS,MAAM,CAACI,OAA9B;AACA,WAAON,KAAP;AACD;AAnB4C,CAAf,CAAhC;AAsBA,eAAeF,UAAf","sourcesContent":["import {createReducer} from \"@reduxjs/toolkit\";\r\nimport {getCurrentWeather, getCurrentLocation, getForecast} from \"./appThunk\";\r\n\r\n\r\n\r\nconst initialState = {\r\n  savedCities: [],\r\n  actualLocation: {},\r\n  currentWeather: {},\r\n  hasFetched: false,\r\n  isFetching: false,\r\n  isFetchingError: null\r\n};\r\n\r\nconst appReducer = createReducer(initialState, {\r\n  [getCurrentWeather.pending]: (state) => {\r\n    state.isFetching = true;\r\n    return state;\r\n  },\r\n  [getCurrentWeather.rejected]: (state, action) => {\r\n    state.isFetching = false;\r\n    state.error = action.error.message;\r\n    return state;\r\n  },\r\n  [getCurrentWeather.fulfilled]: (state, action) => {\r\n    state.isFetching = false;\r\n    state.hasFetched = true;\r\n    state.currentWeather =  action.payload;\r\n    return state;\r\n  },\r\n  [getCurrentLocation.fulfilled]: (state, action) => {\r\n    state.actualLocation = action.payload\r\n    return state;\r\n  }\r\n})\r\n\r\nexport default appReducer;"]},"metadata":{},"sourceType":"module"}