{"ast":null,"code":"import React,{useEffect}from'react';import{BrowserRouter as Router,Switch,Route}from\"react-router-dom\";import{Home}from'./components/main/Home';import{useSelector,useDispatch}from\"react-redux\";import{getCurrentWeatherByCoord,getWeather}from'./redux/appThunk';import SavedCities from\"./components/basic/SavedCities\";import{makeStyles}from'@material-ui/core/styles';import{Grid}from\"@material-ui/core\";import{saveCity}from\"./redux/actions/citiesActions\";import{DetailedWeather}from\"./components/main/DetailedWeather\";var useStyles=makeStyles(function(theme){return{root:{display:'flex',flexWrap:'wrap','& > *':{margin:theme.spacing(1)}}};});function App(){var classes=useStyles();var dispatch=useDispatch();var location=useSelector(function(store){return store.location;});var weather=useSelector(function(store){return store.weather;});var savedCities=useSelector(function(store){return store.cities;});useEffect(function(){if(!location.hasFetched&&!location.isFetching){if(navigator.geolocation){navigator.geolocation.getCurrentPosition(function(position){dispatch(getCurrentWeatherByCoord([position.coords.latitude,position.coords.longitude]));},function(){console.log('location error');});}else{// Browser doesn't support Geolocation\nconsole.log('Browser doesnt support Geolocation');}}},[location]);useEffect(function(){if(localStorage.getItem('savedCities')&&!savedCities.hasFetched){dispatch(saveCity(JSON.parse(localStorage.getItem('savedCities'))));}else{localStorage.setItem('savedCities',JSON.stringify(savedCities.savedCities));}},[savedCities]);useEffect(function(){if(!weather.hasFetched&&!weather.isFetchingError&&!weather.isFetching&&location.hasFetched){dispatch(getWeather(location.actualLocation.location));}},[weather,location]);var routes=/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(Switch,null,/*#__PURE__*/React.createElement(Route,{exact:true,path:\"/\",component:function component(){return/*#__PURE__*/React.createElement(Home,{location:location,weather:weather});}}),savedCities.savedCities.map(function(city){return/*#__PURE__*/React.createElement(Route,{key:city.location.lat,path:\"/\".concat(city.city),component:function component(){return/*#__PURE__*/React.createElement(DetailedWeather,{location:location,weather:weather});}});})));return/*#__PURE__*/React.createElement(\"div\",{className:\"App\"},/*#__PURE__*/React.createElement(Router,null,/*#__PURE__*/React.createElement(Grid,{container:true,className:classes.root,direction:\"column\"},routes,/*#__PURE__*/React.createElement(Grid,{item:true},/*#__PURE__*/React.createElement(SavedCities,null)))));}export default App;","map":{"version":3,"sources":["C:/dev/react/weather_spa/src/App.js"],"names":["React","useEffect","BrowserRouter","Router","Switch","Route","Home","useSelector","useDispatch","getCurrentWeatherByCoord","getWeather","SavedCities","makeStyles","Grid","saveCity","DetailedWeather","useStyles","theme","root","display","flexWrap","margin","spacing","App","classes","dispatch","location","store","weather","savedCities","cities","hasFetched","isFetching","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","console","log","localStorage","getItem","JSON","parse","setItem","stringify","isFetchingError","actualLocation","routes","map","city","lat"],"mappings":"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","sourcesContent":["import React, { useEffect} from 'react';\r\nimport {BrowserRouter as Router, Switch, Route} from \"react-router-dom\";\r\nimport {Home} from './components/main/Home'\r\n\r\nimport {useSelector, useDispatch} from \"react-redux\";\r\nimport {getCurrentWeatherByCoord, getWeather} from './redux/appThunk'\r\nimport SavedCities from \"./components/basic/SavedCities\";\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport {Grid} from \"@material-ui/core\";\r\nimport {saveCity} from \"./redux/actions/citiesActions\";\r\nimport {DetailedWeather} from \"./components/main/DetailedWeather\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        display: 'flex',\r\n        flexWrap: 'wrap',\r\n        '& > *': {\r\n            margin: theme.spacing(1),\r\n        },\r\n    },\r\n}));\r\n\r\n\r\nfunction App() {\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch();\r\n    const location = useSelector(store => store.location);\r\n    const weather = useSelector(store => store.weather)\r\n    const savedCities = useSelector(store => store.cities)\r\n\r\n    useEffect(() => {\r\n        if (!location.hasFetched && !location.isFetching) {\r\n            if (navigator.geolocation) {\r\n                navigator.geolocation.getCurrentPosition(\r\n                    (position) => {\r\n                        dispatch(getCurrentWeatherByCoord([position.coords.latitude, position.coords.longitude]));\r\n                    },\r\n                    () => {\r\n                        console.log('location error')\r\n                    }\r\n                );\r\n            } else {\r\n                // Browser doesn't support Geolocation\r\n                console.log('Browser doesnt support Geolocation')\r\n            }\r\n        }\r\n    }, [location]);\r\n\r\n    useEffect(() => {\r\n            if (localStorage.getItem('savedCities') && !savedCities.hasFetched) {\r\n                dispatch(saveCity(JSON.parse(localStorage.getItem('savedCities'))))\r\n            } else {\r\n                localStorage.setItem('savedCities', JSON.stringify(savedCities.savedCities))\r\n            }\r\n        },\r\n        [savedCities])\r\n\r\n    useEffect(() => {\r\n        if (!weather.hasFetched && !weather.isFetchingError && !weather.isFetching && location.hasFetched) {\r\n            dispatch(getWeather(location.actualLocation.location))\r\n        }\r\n    }, [weather, location]);\r\n\r\n    const routes = (\r\n        <div>\r\n            <Switch>\r\n                <Route exact path=\"/\" component={() => <Home location={location} weather={weather}/>}/>\r\n                {savedCities.savedCities.map(city => {\r\n                  return ( <Route key={city.location.lat} path={`/${city.city}`} component={() => <DetailedWeather location={location} weather={weather}/>}/>)\r\n                })}\r\n            </Switch>\r\n        </div>\r\n    );\r\n\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <Router>\r\n                <Grid container\r\n                      className={classes.root}\r\n                      direction='column'\r\n                >\r\n                    {routes}\r\n\r\n                    <Grid item>\r\n                        <SavedCities/>\r\n                    </Grid>\r\n\r\n                </Grid>\r\n            </Router>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}