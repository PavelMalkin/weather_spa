{"ast":null,"code":"var _jsxFileName = \"C:\\\\dev\\\\react\\\\weather_spa\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { getCurrentLocation, getCurrentWeather, getForecast } from './redux/appThunk';\nimport Navbar from './components/Navbar';\nimport SavedCities from \"./components/SavedCities\";\nimport Main from \"./components/Main\";\nimport { Forecast } from \"./components/Forecast\";\nimport { makeStyles } from '@material-ui/core/styles';\nconst useStyles = makeStyles(theme => ({\n  root: {\n    // display: 'flex',\n    // flexWrap: 'wrap',\n    '& > *': {\n      margin: theme.spacing(1) // width: theme.spacing(16),\n      // height: theme.spacing(16),\n\n    }\n  }\n}));\nconsole.log('apikey', process.env.REACT_APP_OPENWEATHER_API_KEY);\n\nfunction App() {\n  _s();\n\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const location = useSelector(store => store.location);\n  const currentWeather = useSelector(store => store.currentWeather);\n  const forecast = useSelector(store => store.forecast);\n  useEffect(() => {\n    if (!location.hasFetched && !location.isFetching) {\n      dispatch(getCurrentLocation());\n    }\n  }, [location]);\n  useEffect(() => {\n    if (!currentWeather.hasFetched && !currentWeather.isFetchingError && !currentWeather.isFetching && location.hasFetched) {\n      dispatch(getCurrentWeather(location.actualLocation));\n    }\n  }, [currentWeather, location]);\n  useEffect(() => {\n    if (!forecast.hasFetched && !forecast.isFetchingError && !forecast.isFetching && location.hasFetched) {\n      dispatch(getForecast(location.actualLocation));\n    }\n  }, [forecast, location]);\n  const forecastComponent = forecast.hasFetched ? /*#__PURE__*/React.createElement(Forecast, Object.assign({}, forecast, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }\n  })) : null;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Navbar, Object.assign({}, location, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(Main, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }\n  }), forecastComponent, /*#__PURE__*/React.createElement(SavedCities, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }\n  })));\n}\n\n_s(App, \"7lgeZmRzTvt25RIUc7zEsSN0+7c=\", false, function () {\n  return [useStyles, useDispatch, useSelector, useSelector, useSelector];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/dev/react/weather_spa/src/App.js"],"names":["React","useEffect","useSelector","useDispatch","getCurrentLocation","getCurrentWeather","getForecast","Navbar","SavedCities","Main","Forecast","makeStyles","useStyles","theme","root","margin","spacing","console","log","process","env","REACT_APP_OPENWEATHER_API_KEY","App","classes","dispatch","location","store","currentWeather","forecast","hasFetched","isFetching","isFetchingError","actualLocation","forecastComponent"],"mappings":"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","sourcesContent":["import React, {useEffect} from 'react';\r\nimport {useSelector, useDispatch} from \"react-redux\";\r\nimport {getCurrentLocation, getCurrentWeather, getForecast} from './redux/appThunk'\r\nimport  Navbar from './components/Navbar'\r\nimport SavedCities from \"./components/SavedCities\";\r\nimport Main from \"./components/Main\";\r\nimport {Forecast} from \"./components/Forecast\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        // display: 'flex',\r\n        // flexWrap: 'wrap',\r\n        '& > *': {\r\n            margin: theme.spacing(1),\r\n            // width: theme.spacing(16),\r\n            // height: theme.spacing(16),\r\n        },\r\n    },\r\n}));\r\n\r\nconsole.log('apikey', process.env.REACT_APP_OPENWEATHER_API_KEY)\r\n\r\n\r\nfunction App() {\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch();\r\n    const location = useSelector(store => store.location);\r\n    const currentWeather = useSelector(store => store.currentWeather);\r\n    const forecast = useSelector(store => store.forecast)\r\n\r\n    useEffect(()=> {\r\n        if (!location.hasFetched && !location.isFetching) {\r\n            dispatch(getCurrentLocation())\r\n        }\r\n    },[location]);\r\n\r\n    useEffect(() => {\r\n        if (!currentWeather.hasFetched && !currentWeather.isFetchingError && !currentWeather.isFetching && location.hasFetched) {\r\n            dispatch(getCurrentWeather(location.actualLocation))\r\n        }\r\n    }, [currentWeather, location]);\r\n\r\n    useEffect(() => {\r\n        if (!forecast.hasFetched && !forecast.isFetchingError && !forecast.isFetching && location.hasFetched) {\r\n            dispatch(getForecast(location.actualLocation))\r\n        }\r\n    }, [forecast, location]);\r\n\r\n    const forecastComponent = (forecast.hasFetched)? (\r\n        <Forecast {...forecast} />\r\n    ) : null;\r\n\r\n\r\n  return (\r\n    <div className=\"App\">\r\n        <div className={classes.root}>\r\n        <Navbar {...location}/>\r\n        <Main/>\r\n            {forecastComponent}\r\n        <SavedCities/>\r\n        </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}