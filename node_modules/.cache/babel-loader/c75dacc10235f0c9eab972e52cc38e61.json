{"ast":null,"code":"import { createReducer } from \"@reduxjs/toolkit\";\nimport { getCityName, getCurrentWeatherByCoord, getCityCoordinatesByName } from \"../appThunk\";\nimport { setCurrentCity } from \"../actions/citiesActions\";\nconst initialState = {\n  actualLocation: [],\n  hasFetched: false,\n  isFetching: false,\n  isFetchingError: null\n};\nconst locationReducer = createReducer(initialState, {\n  [getCurrentWeatherByCoord.pending]: state => {\n    state.isFetching = true;\n    state.hasFetched = false;\n    return state;\n  },\n  [getCurrentWeatherByCoord.rejected]: (state, action) => {\n    state.isFetching = false;\n    state.error = action.error.message;\n    return state;\n  },\n  [getCurrentWeatherByCoord.fulfilled]: (state, action) => {\n    state.isFetching = false;\n    state.hasFetched = true;\n    state.actualLocation = [action.payload.list[0].name, action.payload.list[0].sys.country, action.payload.list[0].coord];\n    return state;\n  },\n  // [setCurrentCity] : (state, action) => {\n  //     state.actualLocation = [action.payload];\n  //     return state;\n  // }\n  [getCityCoordinatesByName.pending]: state => {\n    state.isFetching = true;\n    state.hasFetched = false;\n    return state;\n  },\n  [getCityCoordinatesByName.rejected]: (state, action) => {\n    state.isFetching = false;\n    state.error = action.error.message;\n    return state;\n  },\n  [getCityCoordinatesByName.fulfilled]: (state, action) => {\n    console.log('getCityCoordinatesByName payload', action.payload);\n    state.isFetching = false;\n    state.hasFetched = true;\n    state.actualLocation = {\n      city: action.payload.result[0].address_components[0].long_name,\n      countryCode: action.payload.result[0].sys.country,\n      location: action.payload.result[0].geometry.location\n    };\n    return state;\n  }\n});\nexport default locationReducer;","map":{"version":3,"sources":["C:/dev/react/weather_spa/src/redux/reducers/locationReducer.js"],"names":["createReducer","getCityName","getCurrentWeatherByCoord","getCityCoordinatesByName","setCurrentCity","initialState","actualLocation","hasFetched","isFetching","isFetchingError","locationReducer","pending","state","rejected","action","error","message","fulfilled","payload","list","name","sys","country","coord","console","log","city","result","address_components","long_name","countryCode","location","geometry"],"mappings":"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","sourcesContent":["import {createReducer} from \"@reduxjs/toolkit\";\r\nimport {getCityName, getCurrentWeatherByCoord, getCityCoordinatesByName} from \"../appThunk\";\r\nimport {setCurrentCity} from \"../actions/citiesActions\"\r\n\r\n\r\nconst initialState = {\r\n    actualLocation: [],\r\n    hasFetched: false,\r\n    isFetching: false,\r\n    isFetchingError: null\r\n};\r\n\r\nconst locationReducer = createReducer(initialState, {\r\n    [getCurrentWeatherByCoord.pending]: (state) => {\r\n        state.isFetching = true;\r\n        state.hasFetched = false;\r\n        return state;\r\n    },\r\n    [getCurrentWeatherByCoord.rejected]: (state, action) => {\r\n        state.isFetching = false;\r\n        state.error = action.error.message;\r\n        return state;\r\n    },\r\n    [getCurrentWeatherByCoord.fulfilled]: (state, action) => {\r\n        state.isFetching = false;\r\n        state.hasFetched = true;\r\n        state.actualLocation = [\r\n            action.payload.list[0].name,\r\n            action.payload.list[0].sys.country,\r\n            action.payload.list[0].coord\r\n        ]\r\n        return state;\r\n    },\r\n    // [setCurrentCity] : (state, action) => {\r\n    //     state.actualLocation = [action.payload];\r\n    //     return state;\r\n    // }\r\n    [getCityCoordinatesByName.pending]: (state) => {\r\n        state.isFetching = true;\r\n        state.hasFetched = false;\r\n        return state;\r\n    },\r\n    [getCityCoordinatesByName.rejected]: (state, action) => {\r\n        state.isFetching = false;\r\n        state.error = action.error.message;\r\n        return state;\r\n    },\r\n    [getCityCoordinatesByName.fulfilled]: (state, action) => {\r\n        console.log('getCityCoordinatesByName payload', action.payload)\r\n        state.isFetching = false;\r\n        state.hasFetched = true;\r\n        state.actualLocation = {\r\n            city: action.payload.result[0].address_components[0].long_name,\r\n            countryCode: action.payload.result[0].sys.country,\r\n            location: action.payload.result[0].geometry.location\r\n        }\r\n        return state;\r\n    },\r\n})\r\n\r\nexport default locationReducer;"]},"metadata":{},"sourceType":"module"}