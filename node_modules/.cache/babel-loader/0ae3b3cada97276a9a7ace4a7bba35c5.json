{"ast":null,"code":"var _jsxFileName = \"C:\\\\dev\\\\react\\\\weather_spa\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { getCurrentLocation, getCurrentWeather, getForecast, getCityName, getCurrentWeatherByCoord } from './redux/appThunk';\nimport Navbar from './components/Navbar';\nimport SavedCities from \"./components/SavedCities\";\nimport Main from \"./components/Main\";\nimport { Forecast } from \"./components/Forecast\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from \"@material-ui/core/Grid\";\nconst useStyles = makeStyles(theme => ({\n  root: {\n    // display: 'flex',\n    // flexWrap: 'wrap',\n    '& > *': {\n      margin: theme.spacing(1) // width: theme.spacing(16),\n      // height: theme.spacing(16),\n\n    }\n  }\n}));\n\nfunction App() {\n  _s();\n\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const location = useSelector(store => store.location);\n  const currentWeather = useSelector(store => store.currentWeather);\n  const forecast = useSelector(store => store.forecast);\n  const cities = useSelector(store => store.cities.savedCities);\n  useEffect(() => {\n    if (!location.hasFetched && !location.isFetching) {\n      // dispatch(getCurrentLocation())\n      if (navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(position => {\n          dispatch(getCurrentWeatherByCoord([position.coords.latitude, position.coords.longitude])); // dispatch(getCityName([ position.coords.latitude , position.coords.longitude]))\n        }, () => {\n          console.log('location error');\n        });\n      } else {\n        // Browser doesn't support Geolocation\n        console.log('Browser doesnt support Geolocation');\n      }\n    }\n  }, [location]); // useEffect(()=>{\n  //     if (position, window.google) {\n  //\n  //         let city;\n  //         let Geocoder;\n  //\n  //         function initialize() {\n  //             Geocoder = new window.google.maps.Geocoder();\n  //         }\n  //\n  //\n  //         function codeLatLng(lat, lng) {\n  //             // var latlng = new window.google.maps.LatLng(lat, lng);\n  //             Geocoder.geoco\n  //             // geocoder.geocode({'latLng': latlng}, (results, status) => {\n  //             //     if (status == window.google.maps.GeocoderStatus.OK) {\n  //             //         console.log(results)\n  //             //         if (results[1]) {\n  //             //             //formatted address\n  //             //             alert(results[0].formatted_address)\n  //             //             //find country name\n  //             //             for (var i = 0; i < results[0].address_components.length; i++) {\n  //             //                 for (var b = 0; b < results[0].address_components[i].types.length; b++) {\n  //             //\n  //             //                     //there are different types that might hold a city admin_area_lvl_1 usually does in come cases looking for sublocality type will be more appropriate\n  //             //                     if (results[0].address_components[i].types[b] == \"administrative_area_level_1\") {\n  //             //                         //this is the object you are looking for\n  //             //                         city = results[0].address_components[i];\n  //             //                         break;\n  //             //                     }\n  //             //                 }\n  //             //             }\n  //             //             //city data\n  //             //             alert(city.short_name + \" \" + city.long_name)\n  //             //\n  //             //         } else {\n  //             //             alert(\"No results found\");\n  //             //         }\n  //             //     } else {\n  //             //         alert(\"Geocoder failed due to: \" + status);\n  //             //     }\n  //             // });\n  //         }\n  //         codeLatLng(position.lat, position.lng)\n  //     }\n  // }, [position])\n\n  useEffect(() => {\n    if (!currentWeather.hasFetched && !currentWeather.isFetchingError && !currentWeather.isFetching && location.hasFetched) {\n      dispatch(getCurrentWeather(location.actualLocation));\n    }\n  }, [currentWeather, location]);\n  useEffect(() => {\n    if (!forecast.hasFetched && !forecast.isFetchingError && !forecast.isFetching && location.hasFetched) {\n      dispatch(getForecast(location.actualLocation));\n    }\n  }, [forecast, location]);\n  const forecastComponent = forecast.hasFetched ? /*#__PURE__*/React.createElement(Forecast, Object.assign({}, forecast, location, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 9\n    }\n  })) : null;\n  const savedCities = cities ? cities.map((city, index) => {\n    console.log('cities index', index);\n    return /*#__PURE__*/React.createElement(SavedCities, Object.assign({\n      key: index * 100\n    }, city, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 17\n      }\n    }));\n  }) : null;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Navbar, Object.assign({}, location, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(Main, Object.assign({}, location, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 17\n    }\n  })), forecastComponent, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    spacing: 2,\n    wrap: \"wrap\",\n    direction: \"row\",\n    justify: \"space-around\",\n    alignItems: \"flex-start\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 17\n    }\n  }, savedCities)));\n}\n\n_s(App, \"BXla2dHQi4sk6g2x02hz8MwqMWU=\", false, function () {\n  return [useStyles, useDispatch, useSelector, useSelector, useSelector, useSelector];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/dev/react/weather_spa/src/App.js"],"names":["React","useEffect","useState","useSelector","useDispatch","getCurrentLocation","getCurrentWeather","getForecast","getCityName","getCurrentWeatherByCoord","Navbar","SavedCities","Main","Forecast","makeStyles","Grid","useStyles","theme","root","margin","spacing","App","classes","dispatch","location","store","currentWeather","forecast","cities","savedCities","hasFetched","isFetching","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","console","log","isFetchingError","actualLocation","forecastComponent","map","city","index"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react';\r\nimport {useSelector, useDispatch} from \"react-redux\";\r\nimport {\r\n    getCurrentLocation,\r\n    getCurrentWeather,\r\n    getForecast,\r\n    getCityName,\r\n    getCurrentWeatherByCoord\r\n} from './redux/appThunk'\r\nimport Navbar from './components/Navbar'\r\nimport SavedCities from \"./components/SavedCities\";\r\nimport Main from \"./components/Main\";\r\nimport {Forecast} from \"./components/Forecast\";\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport Grid from \"@material-ui/core/Grid\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        // display: 'flex',\r\n        // flexWrap: 'wrap',\r\n        '& > *': {\r\n            margin: theme.spacing(1),\r\n            // width: theme.spacing(16),\r\n            // height: theme.spacing(16),\r\n        },\r\n    },\r\n}));\r\n\r\n\r\nfunction App() {\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch();\r\n    const location = useSelector(store => store.location);\r\n    const currentWeather = useSelector(store => store.currentWeather);\r\n    const forecast = useSelector(store => store.forecast);\r\n    const cities = useSelector(store => store.cities.savedCities);\r\n\r\n\r\n    useEffect(() => {\r\n        if (!location.hasFetched && !location.isFetching) {\r\n            // dispatch(getCurrentLocation())\r\n            if (navigator.geolocation) {\r\n                navigator.geolocation.getCurrentPosition(\r\n                    (position) => {\r\n                        dispatch(getCurrentWeatherByCoord([position.coords.latitude, position.coords.longitude]));\r\n                        // dispatch(getCityName([ position.coords.latitude , position.coords.longitude]))\r\n                    },\r\n                    () => {\r\n                        console.log('location error')\r\n                    }\r\n                );\r\n            } else {\r\n                // Browser doesn't support Geolocation\r\n                console.log('Browser doesnt support Geolocation')\r\n            }\r\n        }\r\n    }, [location]);\r\n\r\n    // useEffect(()=>{\r\n    //     if (position, window.google) {\r\n    //\r\n    //         let city;\r\n    //         let Geocoder;\r\n    //\r\n    //         function initialize() {\r\n    //             Geocoder = new window.google.maps.Geocoder();\r\n    //         }\r\n    //\r\n    //\r\n    //         function codeLatLng(lat, lng) {\r\n    //             // var latlng = new window.google.maps.LatLng(lat, lng);\r\n    //             Geocoder.geoco\r\n    //             // geocoder.geocode({'latLng': latlng}, (results, status) => {\r\n    //             //     if (status == window.google.maps.GeocoderStatus.OK) {\r\n    //             //         console.log(results)\r\n    //             //         if (results[1]) {\r\n    //             //             //formatted address\r\n    //             //             alert(results[0].formatted_address)\r\n    //             //             //find country name\r\n    //             //             for (var i = 0; i < results[0].address_components.length; i++) {\r\n    //             //                 for (var b = 0; b < results[0].address_components[i].types.length; b++) {\r\n    //             //\r\n    //             //                     //there are different types that might hold a city admin_area_lvl_1 usually does in come cases looking for sublocality type will be more appropriate\r\n    //             //                     if (results[0].address_components[i].types[b] == \"administrative_area_level_1\") {\r\n    //             //                         //this is the object you are looking for\r\n    //             //                         city = results[0].address_components[i];\r\n    //             //                         break;\r\n    //             //                     }\r\n    //             //                 }\r\n    //             //             }\r\n    //             //             //city data\r\n    //             //             alert(city.short_name + \" \" + city.long_name)\r\n    //             //\r\n    //             //         } else {\r\n    //             //             alert(\"No results found\");\r\n    //             //         }\r\n    //             //     } else {\r\n    //             //         alert(\"Geocoder failed due to: \" + status);\r\n    //             //     }\r\n    //             // });\r\n    //         }\r\n    //         codeLatLng(position.lat, position.lng)\r\n    //     }\r\n    // }, [position])\r\n\r\n    useEffect(() => {\r\n        if (!currentWeather.hasFetched && !currentWeather.isFetchingError && !currentWeather.isFetching && location.hasFetched) {\r\n            dispatch(getCurrentWeather(location.actualLocation))\r\n        }\r\n    }, [currentWeather, location]);\r\n\r\n    useEffect(() => {\r\n        if (!forecast.hasFetched && !forecast.isFetchingError && !forecast.isFetching && location.hasFetched) {\r\n            dispatch(getForecast(location.actualLocation))\r\n        }\r\n    }, [forecast, location]);\r\n\r\n    const forecastComponent = (forecast.hasFetched) ? (\r\n        <Forecast {...forecast} {...location} />\r\n    ) : null;\r\n\r\n    const savedCities = (cities)?  cities.map( (city, index) => {\r\n        console.log('cities index', index)\r\n        return (<SavedCities key={index*100} {...city}/>)\r\n        }\r\n    ) : null;\r\n\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <div className={classes.root}>\r\n                <Navbar {...location}/>\r\n                <Main {...location}/>\r\n                {forecastComponent}\r\n                <Grid container spacing={2}\r\n                      wrap=\"wrap\" direction=\"row\"\r\n                      justify=\"space-around\"\r\n                      alignItems=\"flex-start\">\r\n                    {savedCities}\r\n                </Grid>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}