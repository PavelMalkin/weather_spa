{"ast":null,"code":"var _jsxFileName = \"C:\\\\dev\\\\react\\\\weather_spa\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { getForecast, getCurrentWeatherByCoord, getWeather } from './redux/appThunk';\nimport Navbar from './components/Navbar';\nimport SavedCities from \"./components/SavedCities\";\nimport Main from \"./components/Main\";\nimport { Forecast } from \"./components/Forecast\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Grid } from \"@material-ui/core\";\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: 'flex',\n    flexWrap: 'wrap',\n    '& > *': {\n      margin: theme.spacing(1) // width: theme.spacing(16),\n      // height: theme.spacing(16),\n\n    }\n  }\n}));\n\nfunction App() {\n  _s();\n\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const location = useSelector(store => store.location);\n  const currentWeather = useSelector(store => store.currentWeather); // const forecast = useSelector(store => store.forecast);\n\n  const weather = useSelector(store => store.weather); // const getLocation = useCallback(()=> {\n  //     if (!location.hasFetched && !location.isFetching) {\n  //         if (navigator.geolocation) {\n  //             navigator.geolocation.getCurrentPosition(\n  //                 (position) => {\n  //                     console.log('request from callback')\n  //                     dispatch(getCurrentWeatherByCoord([position.coords.latitude, position.coords.longitude]));\n  //                     // dispatch(getCityName([ position.coords.latitude , position.coords.longitude]))\n  //                 },\n  //                 () => {\n  //                     console.log('location error')\n  //                 }\n  //             );\n  //         } else {\n  //             // Browser doesn't support Geolocation\n  //             console.log('Browser doesnt support Geolocation')\n  //         }\n  //     }\n  // },[location])\n  // getLocation();\n\n  useEffect(() => {\n    if (!location.hasFetched && !location.isFetching) {\n      if (navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(position => {\n          dispatch(getCurrentWeatherByCoord([position.coords.latitude, position.coords.longitude]));\n        }, () => {\n          console.log('location error');\n        });\n      } else {\n        // Browser doesn't support Geolocation\n        console.log('Browser doesnt support Geolocation');\n      }\n    }\n  }, [location]); // useEffect(()=>{\n  //     if (position, window.google) {\n  //\n  //         let city;\n  //         let Geocoder;\n  //\n  //         function initialize() {\n  //             Geocoder = new window.google.maps.Geocoder();\n  //         }\n  //\n  //\n  //         function codeLatLng(lat, lng) {\n  //             // var latlng = new window.google.maps.LatLng(lat, lng);\n  //             Geocoder.geoco\n  //             // geocoder.geocode({'latLng': latlng}, (results, status) => {\n  //             //     if (status == window.google.maps.GeocoderStatus.OK) {\n  //             //         console.log(results)\n  //             //         if (results[1]) {\n  //             //             //formatted address\n  //             //             alert(results[0].formatted_address)\n  //             //             //find country name\n  //             //             for (var i = 0; i < results[0].address_components.length; i++) {\n  //             //                 for (var b = 0; b < results[0].address_components[i].types.length; b++) {\n  //             //\n  //             //                     //there are different types that might hold a city admin_area_lvl_1 usually does in come cases looking for sublocality type will be more appropriate\n  //             //                     if (results[0].address_components[i].types[b] == \"administrative_area_level_1\") {\n  //             //                         //this is the object you are looking for\n  //             //                         city = results[0].address_components[i];\n  //             //                         break;\n  //             //                     }\n  //             //                 }\n  //             //             }\n  //             //             //city data\n  //             //             alert(city.short_name + \" \" + city.long_name)\n  //             //\n  //             //         } else {\n  //             //             alert(\"No results found\");\n  //             //         }\n  //             //     } else {\n  //             //         alert(\"Geocoder failed due to: \" + status);\n  //             //     }\n  //             // });\n  //         }\n  //         codeLatLng(position.lat, position.lng)\n  //     }\n  // }, [position])\n  // useEffect(() => {\n  //     if ( !currentWeather.hasFetched && !currentWeather.isFetchingError && !currentWeather.isFetching && location.hasFetched) {\n  //         dispatch(getCurrentWeather(location.actualLocation))\n  //     }\n  // }, [currentWeather, location]);\n  // useEffect(() => {\n  //     if (!forecast.hasFetched && !forecast.isFetchingError && !forecast.isFetching && location.hasFetched) {\n  //         dispatch(getForecast(location.actualLocation))\n  //     }\n  // }, [forecast, location]);\n  // useEffect(() => {\n  //     if ( !currentWeather.hasFetched && !currentWeather.isFetchingError && !currentWeather.isFetching && location.hasFetched) {\n  //         dispatch(getCurrentWeather(location.actualLocation))\n  //     }\n  // }, [currentWeather, location]);\n\n  useEffect(() => {\n    if (!weather.hasFetched && !weather.isFetchingError && !weather.isFetching && location.hasFetched) {\n      dispatch(getWeather(location.actualLocation.location));\n    }\n  }, [weather, location]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    className: classes.root,\n    direction: \"column\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Navbar, Object.assign({}, location, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 21\n    }\n  }))), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Main, Object.assign({}, location, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 21\n    }\n  }))), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Forecast, Object.assign({}, weather, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 21\n    }\n  }))), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(SavedCities, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 21\n    }\n  }))));\n}\n\n_s(App, \"RKMT4xJBbx+XYtGDwqPLLT/K28o=\", false, function () {\n  return [useStyles, useDispatch, useSelector, useSelector, useSelector];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/dev/react/weather_spa/src/App.js"],"names":["React","useCallback","useEffect","useState","useSelector","useDispatch","getForecast","getCurrentWeatherByCoord","getWeather","Navbar","SavedCities","Main","Forecast","makeStyles","Grid","useStyles","theme","root","display","flexWrap","margin","spacing","App","classes","dispatch","location","store","currentWeather","weather","hasFetched","isFetching","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","console","log","isFetchingError","actualLocation"],"mappings":"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","sourcesContent":["import React, {useCallback, useEffect, useState} from 'react';\r\nimport {useSelector, useDispatch} from \"react-redux\";\r\nimport {getForecast, getCurrentWeatherByCoord, getWeather} from './redux/appThunk'\r\nimport Navbar from './components/Navbar'\r\nimport SavedCities from \"./components/SavedCities\";\r\nimport Main from \"./components/Main\";\r\nimport {Forecast} from \"./components/Forecast\";\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport {Grid} from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        display: 'flex',\r\n        flexWrap: 'wrap',\r\n        '& > *': {\r\n            margin: theme.spacing(1),\r\n            // width: theme.spacing(16),\r\n            // height: theme.spacing(16),\r\n        },\r\n    },\r\n}));\r\n\r\n\r\nfunction App() {\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch();\r\n    const location = useSelector(store => store.location);\r\n    const currentWeather = useSelector(store => store.currentWeather);\r\n    // const forecast = useSelector(store => store.forecast);\r\n    const weather = useSelector(store => store.weather)\r\n\r\n    // const getLocation = useCallback(()=> {\r\n    //     if (!location.hasFetched && !location.isFetching) {\r\n    //         if (navigator.geolocation) {\r\n    //             navigator.geolocation.getCurrentPosition(\r\n    //                 (position) => {\r\n    //                     console.log('request from callback')\r\n    //                     dispatch(getCurrentWeatherByCoord([position.coords.latitude, position.coords.longitude]));\r\n    //                     // dispatch(getCityName([ position.coords.latitude , position.coords.longitude]))\r\n    //                 },\r\n    //                 () => {\r\n    //                     console.log('location error')\r\n    //                 }\r\n    //             );\r\n    //         } else {\r\n    //             // Browser doesn't support Geolocation\r\n    //             console.log('Browser doesnt support Geolocation')\r\n    //         }\r\n    //     }\r\n    // },[location])\r\n    // getLocation();\r\n\r\n    useEffect(() => {\r\n        if (!location.hasFetched && !location.isFetching) {\r\n            if (navigator.geolocation) {\r\n                navigator.geolocation.getCurrentPosition(\r\n                    (position) => {\r\n                        dispatch(getCurrentWeatherByCoord([ position.coords.latitude , position.coords.longitude]));\r\n                    },\r\n                    () => {\r\n                        console.log('location error')\r\n                    }\r\n                );\r\n            } else {\r\n                // Browser doesn't support Geolocation\r\n                console.log('Browser doesnt support Geolocation')\r\n            }\r\n        }\r\n    }, [location]);\r\n\r\n    // useEffect(()=>{\r\n    //     if (position, window.google) {\r\n    //\r\n    //         let city;\r\n    //         let Geocoder;\r\n    //\r\n    //         function initialize() {\r\n    //             Geocoder = new window.google.maps.Geocoder();\r\n    //         }\r\n    //\r\n    //\r\n    //         function codeLatLng(lat, lng) {\r\n    //             // var latlng = new window.google.maps.LatLng(lat, lng);\r\n    //             Geocoder.geoco\r\n    //             // geocoder.geocode({'latLng': latlng}, (results, status) => {\r\n    //             //     if (status == window.google.maps.GeocoderStatus.OK) {\r\n    //             //         console.log(results)\r\n    //             //         if (results[1]) {\r\n    //             //             //formatted address\r\n    //             //             alert(results[0].formatted_address)\r\n    //             //             //find country name\r\n    //             //             for (var i = 0; i < results[0].address_components.length; i++) {\r\n    //             //                 for (var b = 0; b < results[0].address_components[i].types.length; b++) {\r\n    //             //\r\n    //             //                     //there are different types that might hold a city admin_area_lvl_1 usually does in come cases looking for sublocality type will be more appropriate\r\n    //             //                     if (results[0].address_components[i].types[b] == \"administrative_area_level_1\") {\r\n    //             //                         //this is the object you are looking for\r\n    //             //                         city = results[0].address_components[i];\r\n    //             //                         break;\r\n    //             //                     }\r\n    //             //                 }\r\n    //             //             }\r\n    //             //             //city data\r\n    //             //             alert(city.short_name + \" \" + city.long_name)\r\n    //             //\r\n    //             //         } else {\r\n    //             //             alert(\"No results found\");\r\n    //             //         }\r\n    //             //     } else {\r\n    //             //         alert(\"Geocoder failed due to: \" + status);\r\n    //             //     }\r\n    //             // });\r\n    //         }\r\n    //         codeLatLng(position.lat, position.lng)\r\n    //     }\r\n    // }, [position])\r\n\r\n    // useEffect(() => {\r\n    //     if ( !currentWeather.hasFetched && !currentWeather.isFetchingError && !currentWeather.isFetching && location.hasFetched) {\r\n    //         dispatch(getCurrentWeather(location.actualLocation))\r\n    //     }\r\n    // }, [currentWeather, location]);\r\n\r\n    // useEffect(() => {\r\n    //     if (!forecast.hasFetched && !forecast.isFetchingError && !forecast.isFetching && location.hasFetched) {\r\n    //         dispatch(getForecast(location.actualLocation))\r\n    //     }\r\n    // }, [forecast, location]);\r\n\r\n    // useEffect(() => {\r\n    //     if ( !currentWeather.hasFetched && !currentWeather.isFetchingError && !currentWeather.isFetching && location.hasFetched) {\r\n    //         dispatch(getCurrentWeather(location.actualLocation))\r\n    //     }\r\n    // }, [currentWeather, location]);\r\n\r\n    useEffect(() => {\r\n        if ( !weather.hasFetched && !weather.isFetchingError && !weather.isFetching && location.hasFetched) {\r\n            dispatch(getWeather(location.actualLocation.location))\r\n        }\r\n    }, [weather, location]);\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <Grid container className={classes.root} direction='column'\r\n            >\r\n                <Grid item>\r\n                    <Navbar {...location}/>\r\n                </Grid>\r\n                <Grid item>\r\n                    <Main {...location}/>\r\n                </Grid>\r\n                <Grid item>\r\n                    <Forecast {...weather} />\r\n                </Grid>\r\n                <Grid item>\r\n                    <SavedCities/>\r\n                </Grid>\r\n\r\n            </Grid>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}