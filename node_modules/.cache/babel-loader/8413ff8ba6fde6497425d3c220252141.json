{"ast":null,"code":"import { createReducer } from \"@reduxjs/toolkit\";\nimport { getCityName, getCurrentWeatherByCoord } from \"../appThunk\";\nimport { setCurrentCity } from \"../actions/citiesActions\";\nconst initialState = {\n  actualLocation: [],\n  hasFetched: false,\n  isFetching: false,\n  isFetchingError: null\n};\nconst locationReducer = createReducer(initialState, {\n  [getCurrentWeatherByCoord.pending]: state => {\n    state.isFetching = true;\n    return state;\n  },\n  [getCurrentWeatherByCoord.rejected]: (state, action) => {\n    state.isFetching = false;\n    state.error = action.error.message;\n    return state;\n  },\n  [getCurrentWeatherByCoord.fulfilled]: (state, action) => {\n    state.isFetching = false;\n    state.hasFetched = true;\n    console.log('payload in location', action.payload.list[0].name);\n    console.log('payload in location', action.payload.list[0].name);\n    state.actualLocation = [action.payload.results[0].address_components.find(place => place.types.some(type => type === 'locality')).long_name, action.payload.results[0].address_components.find(place => place.types.some(type => type === 'country')).short_name];\n    return state;\n  },\n  [setCurrentCity]: (state, action) => {\n    state.actualLocation = [action.payload];\n    return state;\n  }\n});\nexport default locationReducer;","map":{"version":3,"sources":["C:/dev/react/weather_spa/src/redux/reducers/locationReducer.js"],"names":["createReducer","getCityName","getCurrentWeatherByCoord","setCurrentCity","initialState","actualLocation","hasFetched","isFetching","isFetchingError","locationReducer","pending","state","rejected","action","error","message","fulfilled","console","log","payload","list","name","results","address_components","find","place","types","some","type","long_name","short_name"],"mappings":"AAAA,SAAQA,aAAR,QAA4B,kBAA5B;AACA,SAAQC,WAAR,EAAqBC,wBAArB,QAAoD,aAApD;AACA,SAAQC,cAAR,QAA6B,0BAA7B;AAIA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,cAAc,EAAE,EADC;AAEjBC,EAAAA,UAAU,EAAE,KAFK;AAGjBC,EAAAA,UAAU,EAAE,KAHK;AAIjBC,EAAAA,eAAe,EAAE;AAJA,CAArB;AAOA,MAAMC,eAAe,GAAGT,aAAa,CAACI,YAAD,EAAe;AAChD,GAACF,wBAAwB,CAACQ,OAA1B,GAAqCC,KAAD,IAAW;AAC3CA,IAAAA,KAAK,CAACJ,UAAN,GAAmB,IAAnB;AACA,WAAOI,KAAP;AACH,GAJ+C;AAKhD,GAACT,wBAAwB,CAACU,QAA1B,GAAqC,CAACD,KAAD,EAAQE,MAAR,KAAmB;AACpDF,IAAAA,KAAK,CAACJ,UAAN,GAAmB,KAAnB;AACAI,IAAAA,KAAK,CAACG,KAAN,GAAcD,MAAM,CAACC,KAAP,CAAaC,OAA3B;AACA,WAAOJ,KAAP;AACH,GAT+C;AAUhD,GAACT,wBAAwB,CAACc,SAA1B,GAAsC,CAACL,KAAD,EAAQE,MAAR,KAAmB;AACrDF,IAAAA,KAAK,CAACJ,UAAN,GAAmB,KAAnB;AACAI,IAAAA,KAAK,CAACL,UAAN,GAAmB,IAAnB;AACAW,IAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCL,MAAM,CAACM,OAAP,CAAeC,IAAf,CAAoB,CAApB,EAAuBC,IAA1D;AACAJ,IAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCL,MAAM,CAACM,OAAP,CAAeC,IAAf,CAAoB,CAApB,EAAuBC,IAA1D;AACAV,IAAAA,KAAK,CAACN,cAAN,GAAuB,CACnBQ,MAAM,CAACM,OAAP,CAAeG,OAAf,CAAuB,CAAvB,EAA0BC,kBAA1B,CAA6CC,IAA7C,CAAmDC,KAAK,IAAIA,KAAK,CAACC,KAAN,CAAYC,IAAZ,CAAiBC,IAAI,IAAIA,IAAI,KAAI,UAAjC,CAA5D,EAA0GC,SADvF,EAEnBhB,MAAM,CAACM,OAAP,CAAeG,OAAf,CAAuB,CAAvB,EAA0BC,kBAA1B,CAA6CC,IAA7C,CAAmDC,KAAK,IAAIA,KAAK,CAACC,KAAN,CAAYC,IAAZ,CAAiBC,IAAI,IAAIA,IAAI,KAAI,SAAjC,CAA5D,EAAyGE,UAFtF,CAAvB;AAIA,WAAOnB,KAAP;AACH,GApB+C;AAqBhD,GAACR,cAAD,GAAmB,CAACQ,KAAD,EAAQE,MAAR,KAAmB;AAClCF,IAAAA,KAAK,CAACN,cAAN,GAAuB,CAACQ,MAAM,CAACM,OAAR,CAAvB;AACA,WAAOR,KAAP;AACH;AAxB+C,CAAf,CAArC;AA2BA,eAAeF,eAAf","sourcesContent":["import {createReducer} from \"@reduxjs/toolkit\";\r\nimport {getCityName, getCurrentWeatherByCoord} from \"../appThunk\";\r\nimport {setCurrentCity} from \"../actions/citiesActions\"\r\n\r\n\r\n\r\nconst initialState = {\r\n    actualLocation: [],\r\n    hasFetched: false,\r\n    isFetching: false,\r\n    isFetchingError: null\r\n};\r\n\r\nconst locationReducer = createReducer(initialState, {\r\n    [getCurrentWeatherByCoord.pending]: (state) => {\r\n        state.isFetching = true;\r\n        return state;\r\n    },\r\n    [getCurrentWeatherByCoord.rejected]: (state, action) => {\r\n        state.isFetching = false;\r\n        state.error = action.error.message;\r\n        return state;\r\n    },\r\n    [getCurrentWeatherByCoord.fulfilled]: (state, action) => {\r\n        state.isFetching = false;\r\n        state.hasFetched = true;\r\n        console.log('payload in location', action.payload.list[0].name);\r\n        console.log('payload in location', action.payload.list[0].name)\r\n        state.actualLocation = [\r\n            action.payload.results[0].address_components.find( place => place.types.some(type => type ==='locality')).long_name,\r\n            action.payload.results[0].address_components.find( place => place.types.some(type => type ==='country')).short_name\r\n        ]\r\n        return state;\r\n    },\r\n    [setCurrentCity] : (state, action) => {\r\n        state.actualLocation = [action.payload];\r\n        return state;\r\n    }\r\n})\r\n\r\nexport default locationReducer;"]},"metadata":{},"sourceType":"module"}