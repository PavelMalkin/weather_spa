{"ast":null,"code":"import { createReducer } from \"@reduxjs/toolkit\";\nimport { getWeather } from \"../appThunk\";\nimport { dropWeather, setForecast } from \"../actions/weatherActions\";\nconst initialState = {\n  weather: {\n    current: [],\n    daily: [],\n    hoursForecast: []\n  },\n  forecastPeriod: 7,\n  hasFetched: false,\n  isFetching: false,\n  isFetchingError: null\n};\nconst weatherReducer = createReducer(initialState, {\n  [getWeather.pending]: state => {\n    state.isFetching = true;\n    state.hasFetched = false;\n    return state;\n  },\n  [getWeather.rejected]: (state, action) => {\n    state.isFetching = false;\n    state.error = action.error.message;\n    return state;\n  },\n  [getWeather.fulfilled]: (state, action) => {\n    // console.log('payload getWeather.fulfilled one call', action.payload)\n    state.isFetching = false;\n    state.hasFetched = true;\n    state.weather = action.payload;\n    return state;\n  },\n  [setForecast]: (state, action) => {\n    state.forecastPeriod = action.payload;\n    return state;\n  },\n  [dropWeather]: state => {\n    state.weather = {};\n    state.isFetching = false;\n    state.hasFetched = false;\n    return state;\n  }\n});\nexport default weatherReducer;","map":{"version":3,"sources":["C:/dev/react/weather_spa/src/redux/reducers/weatherReducer.js"],"names":["createReducer","getWeather","dropWeather","setForecast","initialState","weather","current","daily","hoursForecast","forecastPeriod","hasFetched","isFetching","isFetchingError","weatherReducer","pending","state","rejected","action","error","message","fulfilled","payload"],"mappings":"AAAA,SAAQA,aAAR,QAA4B,kBAA5B;AACA,SAAQC,UAAR,QAAyB,aAAzB;AACA,SAAQC,WAAR,EAAsBC,WAAtB,QAAwC,2BAAxC;AAGA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,OAAO,EAAE;AACLC,IAAAA,OAAO,EAAE,EADJ;AAELC,IAAAA,KAAK,EAAE,EAFF;AAGLC,IAAAA,aAAa,EAAE;AAHV,GADQ;AAMjBC,EAAAA,cAAc,EAAE,CANC;AAOjBC,EAAAA,UAAU,EAAE,KAPK;AAQjBC,EAAAA,UAAU,EAAE,KARK;AASjBC,EAAAA,eAAe,EAAE;AATA,CAArB;AAYA,MAAMC,cAAc,GAAGb,aAAa,CAACI,YAAD,EAAe;AAC/C,GAACH,UAAU,CAACa,OAAZ,GAAuBC,KAAD,IAAW;AAC7BA,IAAAA,KAAK,CAACJ,UAAN,GAAmB,IAAnB;AACAI,IAAAA,KAAK,CAACL,UAAN,GAAmB,KAAnB;AACA,WAAOK,KAAP;AACH,GAL8C;AAM/C,GAACd,UAAU,CAACe,QAAZ,GAAuB,CAACD,KAAD,EAAQE,MAAR,KAAmB;AACtCF,IAAAA,KAAK,CAACJ,UAAN,GAAmB,KAAnB;AACAI,IAAAA,KAAK,CAACG,KAAN,GAAcD,MAAM,CAACC,KAAP,CAAaC,OAA3B;AACA,WAAOJ,KAAP;AACH,GAV8C;AAW/C,GAACd,UAAU,CAACmB,SAAZ,GAAwB,CAACL,KAAD,EAAQE,MAAR,KAAmB;AACvC;AACAF,IAAAA,KAAK,CAACJ,UAAN,GAAmB,KAAnB;AACAI,IAAAA,KAAK,CAACL,UAAN,GAAmB,IAAnB;AACAK,IAAAA,KAAK,CAACV,OAAN,GAAiBY,MAAM,CAACI,OAAxB;AACA,WAAON,KAAP;AACH,GAjB8C;AAkB/C,GAACZ,WAAD,GAAgB,CAACY,KAAD,EAAQE,MAAR,KAAmB;AAC/BF,IAAAA,KAAK,CAACN,cAAN,GAAuBQ,MAAM,CAACI,OAA9B;AACA,WAAON,KAAP;AACH,GArB8C;AAsB/C,GAACb,WAAD,GAAiBa,KAAD,IAAW;AACvBA,IAAAA,KAAK,CAACV,OAAN,GAAgB,EAAhB;AACAU,IAAAA,KAAK,CAACJ,UAAN,GAAmB,KAAnB;AACAI,IAAAA,KAAK,CAACL,UAAN,GAAmB,KAAnB;AACA,WAAOK,KAAP;AACH;AA3B8C,CAAf,CAApC;AA8BA,eAAeF,cAAf","sourcesContent":["import {createReducer} from \"@reduxjs/toolkit\";\r\nimport {getWeather} from \"../appThunk\";\r\nimport {dropWeather , setForecast} from \"../actions/weatherActions\";\r\n\r\n\r\nconst initialState = {\r\n    weather: {\r\n        current: [],\r\n        daily: [],\r\n        hoursForecast: []\r\n    },\r\n    forecastPeriod: 7,\r\n    hasFetched: false,\r\n    isFetching: false,\r\n    isFetchingError: null\r\n};\r\n\r\nconst weatherReducer = createReducer(initialState, {\r\n    [getWeather.pending]: (state) => {\r\n        state.isFetching = true;\r\n        state.hasFetched = false;\r\n        return state;\r\n    },\r\n    [getWeather.rejected]: (state, action) => {\r\n        state.isFetching = false;\r\n        state.error = action.error.message;\r\n        return state;\r\n    },\r\n    [getWeather.fulfilled]: (state, action) => {\r\n        // console.log('payload getWeather.fulfilled one call', action.payload)\r\n        state.isFetching = false;\r\n        state.hasFetched = true;\r\n        state.weather =  action.payload;\r\n        return state;\r\n    },\r\n    [setForecast] : (state, action) => {\r\n        state.forecastPeriod = action.payload\r\n        return state;\r\n    },\r\n    [dropWeather] : (state) => {\r\n        state.weather = {};\r\n        state.isFetching = false;\r\n        state.hasFetched = false;\r\n        return state;\r\n    }\r\n})\r\n\r\nexport default weatherReducer;"]},"metadata":{},"sourceType":"module"}