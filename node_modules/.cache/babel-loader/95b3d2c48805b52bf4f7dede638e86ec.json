{"ast":null,"code":"var _jsxFileName = \"C:\\\\dev\\\\react\\\\weather_spa\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { getCurrentLocation, getCurrentWeather, getForecast } from './redux/appThunk';\nimport Navbar from './components/Navbar';\nimport SavedCities from \"./components/SavedCities\";\nimport Main from \"./components/Main\";\nimport { Forecast } from \"./components/Forecast\";\nimport { makeStyles } from '@material-ui/core/styles';\nconst useStyles = makeStyles(theme => ({\n  root: {\n    // display: 'flex',\n    // flexWrap: 'wrap',\n    '& > *': {\n      margin: theme.spacing(1) // width: theme.spacing(16),\n      // height: theme.spacing(16),\n\n    }\n  }\n}));\n\nfunction App() {\n  _s();\n\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const location = useSelector(store => store.location);\n  const currentWeather = useSelector(store => store.currentWeather);\n  const forecast = useSelector(store => store.forecast);\n  const [position, setPosition] = useState({});\n  useEffect(() => {\n    if (!location.hasFetched && !location.isFetching) {\n      // dispatch(getCurrentLocation())\n      if (navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(position => {\n          setPosition({\n            lat: position.coords.latitude,\n            lng: position.coords.longitude\n          });\n        }, () => {\n          console.log('location error');\n        });\n      } else {\n        // Browser doesn't support Geolocation\n        console.log('Browser doesnt support Geolocation');\n      }\n    }\n  }, [location]);\n  useEffect(() => {\n    if (position, window.google) {\n      let city;\n      let geocoder;\n\n      function initialize() {\n        geocoder = new window.google.maps.Geocoder();\n      }\n\n      function codeLatLng(lat, lng) {\n        var latlng = new window.google.maps.LatLng(lat, lng);\n        console.log('latlng', latlng); // geocoder.geocode({'latLng': latlng}, (results, status) => {\n        //     if (status == window.google.maps.GeocoderStatus.OK) {\n        //         console.log(results)\n        //         if (results[1]) {\n        //             //formatted address\n        //             alert(results[0].formatted_address)\n        //             //find country name\n        //             for (var i = 0; i < results[0].address_components.length; i++) {\n        //                 for (var b = 0; b < results[0].address_components[i].types.length; b++) {\n        //\n        //                     //there are different types that might hold a city admin_area_lvl_1 usually does in come cases looking for sublocality type will be more appropriate\n        //                     if (results[0].address_components[i].types[b] == \"administrative_area_level_1\") {\n        //                         //this is the object you are looking for\n        //                         city = results[0].address_components[i];\n        //                         break;\n        //                     }\n        //                 }\n        //             }\n        //             //city data\n        //             alert(city.short_name + \" \" + city.long_name)\n        //\n        //         } else {\n        //             alert(\"No results found\");\n        //         }\n        //     } else {\n        //         alert(\"Geocoder failed due to: \" + status);\n        //     }\n        // });\n      }\n\n      codeLatLng(position.lat, position.lng);\n    }\n  }, [position]);\n  useEffect(() => {\n    if (!currentWeather.hasFetched && !currentWeather.isFetchingError && !currentWeather.isFetching && location.hasFetched) {\n      dispatch(getCurrentWeather(location.actualLocation));\n    }\n  }, [currentWeather, location]);\n  useEffect(() => {\n    if (!forecast.hasFetched && !forecast.isFetchingError && !forecast.isFetching && location.hasFetched) {\n      dispatch(getForecast(location.actualLocation));\n    }\n  }, [forecast, location]);\n  const forecastComponent = forecast.hasFetched ? /*#__PURE__*/React.createElement(Forecast, Object.assign({}, forecast, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 9\n    }\n  })) : null;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Navbar, Object.assign({}, location, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(Main, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 9\n    }\n  }), forecastComponent, /*#__PURE__*/React.createElement(SavedCities, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 9\n    }\n  })));\n}\n\n_s(App, \"U3DYSQZHANGp7NmNwWvKmLrDZ1o=\", false, function () {\n  return [useStyles, useDispatch, useSelector, useSelector, useSelector];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/dev/react/weather_spa/src/App.js"],"names":["React","useEffect","useState","useSelector","useDispatch","getCurrentLocation","getCurrentWeather","getForecast","Navbar","SavedCities","Main","Forecast","makeStyles","useStyles","theme","root","margin","spacing","App","classes","dispatch","location","store","currentWeather","forecast","position","setPosition","hasFetched","isFetching","navigator","geolocation","getCurrentPosition","lat","coords","latitude","lng","longitude","console","log","window","google","city","geocoder","initialize","maps","Geocoder","codeLatLng","latlng","LatLng","isFetchingError","actualLocation","forecastComponent"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react';\r\nimport {useSelector, useDispatch} from \"react-redux\";\r\nimport {getCurrentLocation, getCurrentWeather, getForecast} from './redux/appThunk'\r\nimport  Navbar from './components/Navbar'\r\nimport SavedCities from \"./components/SavedCities\";\r\nimport Main from \"./components/Main\";\r\nimport {Forecast} from \"./components/Forecast\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        // display: 'flex',\r\n        // flexWrap: 'wrap',\r\n        '& > *': {\r\n            margin: theme.spacing(1),\r\n            // width: theme.spacing(16),\r\n            // height: theme.spacing(16),\r\n        },\r\n    },\r\n}));\r\n\r\n\r\n\r\n\r\nfunction App() {\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch();\r\n    const location = useSelector(store => store.location);\r\n    const currentWeather = useSelector(store => store.currentWeather);\r\n    const forecast = useSelector(store => store.forecast)\r\n    const [position, setPosition] = useState({})\r\n\r\n    useEffect(()=> {\r\n        if (!location.hasFetched && !location.isFetching) {\r\n            // dispatch(getCurrentLocation())\r\n            if (navigator.geolocation) {\r\n                navigator.geolocation.getCurrentPosition(\r\n                    (position) => {\r\n                        setPosition( {\r\n                            lat: position.coords.latitude,\r\n                            lng: position.coords.longitude,\r\n                        });\r\n                    },\r\n                    () => {\r\n                        console.log('location error')\r\n                    }\r\n                );\r\n            } else {\r\n                // Browser doesn't support Geolocation\r\n                console.log('Browser doesnt support Geolocation')\r\n            }\r\n            }\r\n    },[location]);\r\n\r\n    useEffect(()=>{\r\n        if (position, window.google) {\r\n\r\n            let city;\r\n            let geocoder;\r\n\r\n            function initialize() {\r\n                geocoder = new window.google.maps.Geocoder();\r\n            }\r\n\r\n\r\n            function codeLatLng(lat, lng) {\r\n                var latlng = new window.google.maps.LatLng(lat, lng);\r\n                console.log('latlng', latlng)\r\n                // geocoder.geocode({'latLng': latlng}, (results, status) => {\r\n                //     if (status == window.google.maps.GeocoderStatus.OK) {\r\n                //         console.log(results)\r\n                //         if (results[1]) {\r\n                //             //formatted address\r\n                //             alert(results[0].formatted_address)\r\n                //             //find country name\r\n                //             for (var i = 0; i < results[0].address_components.length; i++) {\r\n                //                 for (var b = 0; b < results[0].address_components[i].types.length; b++) {\r\n                //\r\n                //                     //there are different types that might hold a city admin_area_lvl_1 usually does in come cases looking for sublocality type will be more appropriate\r\n                //                     if (results[0].address_components[i].types[b] == \"administrative_area_level_1\") {\r\n                //                         //this is the object you are looking for\r\n                //                         city = results[0].address_components[i];\r\n                //                         break;\r\n                //                     }\r\n                //                 }\r\n                //             }\r\n                //             //city data\r\n                //             alert(city.short_name + \" \" + city.long_name)\r\n                //\r\n                //         } else {\r\n                //             alert(\"No results found\");\r\n                //         }\r\n                //     } else {\r\n                //         alert(\"Geocoder failed due to: \" + status);\r\n                //     }\r\n                // });\r\n            }\r\n            codeLatLng(position.lat, position.lng)\r\n        }\r\n    }, [position])\r\n\r\n    useEffect(() => {\r\n        if (!currentWeather.hasFetched && !currentWeather.isFetchingError && !currentWeather.isFetching && location.hasFetched) {\r\n            dispatch(getCurrentWeather(location.actualLocation))\r\n        }\r\n    }, [currentWeather, location]);\r\n\r\n    useEffect(() => {\r\n        if (!forecast.hasFetched && !forecast.isFetchingError && !forecast.isFetching && location.hasFetched) {\r\n            dispatch(getForecast(location.actualLocation))\r\n        }\r\n    }, [forecast, location]);\r\n\r\n    const forecastComponent = (forecast.hasFetched)? (\r\n        <Forecast {...forecast} />\r\n    ) : null;\r\n\r\n\r\n  return (\r\n    <div className=\"App\">\r\n        <div className={classes.root}>\r\n        <Navbar {...location}/>\r\n        <Main/>\r\n            {forecastComponent}\r\n        <SavedCities/>\r\n        </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}