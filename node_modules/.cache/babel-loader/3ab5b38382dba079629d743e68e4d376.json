{"ast":null,"code":"import { createReducer } from \"@reduxjs/toolkit\";\nimport { saveCity, deleteCity } from \"../actions/citiesActions\";\nconst initialState = {\n  savedCities: [],\n  hasFetched: false\n};\nconst citiesReducer = createReducer(initialState, {\n  [saveCity]: (state, action) => {\n    state.savedCities = [...state.savedCities, ...action.payload];\n    state.hasFetched = true;\n    return state;\n  },\n  [deleteCity]: (state, action) => {\n    state.savedCities.forEach((city, index) => {\n      if (city.city === action.payload.city) {\n        state.savedCities.splice(index, 1);\n      }\n    });\n    return state;\n  }\n});\nexport default citiesReducer;","map":{"version":3,"sources":["C:/dev/react/weather_spa/src/redux/reducers/citiesReducer.js"],"names":["createReducer","saveCity","deleteCity","initialState","savedCities","hasFetched","citiesReducer","state","action","payload","forEach","city","index","splice"],"mappings":"AAAA,SAAQA,aAAR,QAA4B,kBAA5B;AACA,SAAQC,QAAR,EAAkBC,UAAlB,QAAmC,0BAAnC;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,WAAW,EAAE,EADI;AAEjBC,EAAAA,UAAU,EAAE;AAFK,CAArB;AAKA,MAAMC,aAAa,GAAGN,aAAa,CAACG,YAAD,EAAe;AAC9C,GAACF,QAAD,GAAY,CAACM,KAAD,EAAQC,MAAR,KAAmB;AAC3BD,IAAAA,KAAK,CAACH,WAAN,GAAoB,CAAC,GAAGG,KAAK,CAACH,WAAV,EAAuB,GAAGI,MAAM,CAACC,OAAjC,CAApB;AACAF,IAAAA,KAAK,CAACF,UAAN,GAAmB,IAAnB;AACA,WAAOE,KAAP;AACH,GAL6C;AAM9C,GAACL,UAAD,GAAc,CAACK,KAAD,EAAQC,MAAR,KAAmB;AAC7BD,IAAAA,KAAK,CAACH,WAAN,CAAkBM,OAAlB,CAA2B,CAACC,IAAD,EAAOC,KAAP,KAAiB;AACxC,UAAID,IAAI,CAACA,IAAL,KAAcH,MAAM,CAACC,OAAP,CAAeE,IAAjC,EAAuC;AACnCJ,QAAAA,KAAK,CAACH,WAAN,CAAkBS,MAAlB,CAAyBD,KAAzB,EAAgC,CAAhC;AACH;AACJ,KAJD;AAKA,WAAOL,KAAP;AACH;AAb6C,CAAf,CAAnC;AAiBA,eAAeD,aAAf","sourcesContent":["import {createReducer} from \"@reduxjs/toolkit\";\r\nimport {saveCity, deleteCity} from \"../actions/citiesActions\";\r\n\r\nconst initialState = {\r\n    savedCities: [],\r\n    hasFetched: false,\r\n};\r\n\r\nconst citiesReducer = createReducer(initialState, {\r\n    [saveCity]: (state, action) => {\r\n        state.savedCities = [...state.savedCities, ...action.payload];\r\n        state.hasFetched = true;\r\n        return state;\r\n    },\r\n    [deleteCity]: (state, action) => {\r\n        state.savedCities.forEach( (city, index) => {\r\n            if (city.city === action.payload.city) {\r\n                state.savedCities.splice(index, 1)\r\n            }\r\n        })\r\n        return state\r\n    }\r\n\r\n})\r\n\r\nexport default citiesReducer;"]},"metadata":{},"sourceType":"module"}