{"ast":null,"code":"import _toConsumableArray from\"C:/dev/react/weather_spa/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _slicedToArray from\"C:/dev/react/weather_spa/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect,useRef,useMemo}from'react';import{useDispatch}from\"react-redux\";import TextField from'@material-ui/core/TextField';import Autocomplete from'@material-ui/lab/Autocomplete';import LocationOnIcon from'@material-ui/icons/LocationOn';import Grid from'@material-ui/core/Grid';import Typography from'@material-ui/core/Typography';import{makeStyles}from'@material-ui/core/styles';import parse from'autosuggest-highlight/parse';import throttle from'lodash/throttle';import{dropWeather}from\"../../redux/actions/weatherActions\";import{getCityCoordinatesByName}from'../../redux/appThunk';function loadScript(src,position,id){if(!position){return;}var script=document.createElement('script');script.setAttribute('async','');script.setAttribute('id',id);script.src=src;position.appendChild(script);}var autocompleteService={current:null};var useStyles=makeStyles(function(theme){return{icon:{color:theme.palette.text.secondary,marginRight:theme.spacing(2)}};});export default function GoogleMaps(){var classes=useStyles();var dispatch=useDispatch();var _useState=useState(null),_useState2=_slicedToArray(_useState,2),value=_useState2[0],setValue=_useState2[1];var _useState3=useState(''),_useState4=_slicedToArray(_useState3,2),inputValue=_useState4[0],setInputValue=_useState4[1];var _useState5=useState([]),_useState6=_slicedToArray(_useState5,2),options=_useState6[0],setOptions=_useState6[1];var loaded=useRef(false);if(typeof window!=='undefined'&&!loaded.current){if(!document.querySelector('#google-maps')){loadScript(\"https://maps.googleapis.com/maps/api/js?key=\".concat(process.env.REACT_APP_GOOGLE_API_KEY,\"&libraries=places&types=(cities)\"),document.querySelector('head'),'google-maps');}loaded.current=true;}var fetch=useMemo(function(){return throttle(function(request,callback){autocompleteService.current.getPlacePredictions(request,callback);},200);},[]);useEffect(function(){if(value){dispatch(getCityCoordinatesByName(value.description));dispatch(dropWeather());setValue('');}},[value]);useEffect(function(){var active=true;if(!autocompleteService.current&&window.google){autocompleteService.current=new window.google.maps.places.AutocompleteService();}if(!autocompleteService.current){return undefined;}if(inputValue===''){setOptions(value?[value]:[]);return undefined;}fetch({input:inputValue},function(results){if(results!=null){results=results.filter(function(result){return result.types.some(function(type){return type===\"locality\";});});}if(active){var newOptions=[];if(value){newOptions=[value];}if(results){newOptions=[].concat(_toConsumableArray(newOptions),_toConsumableArray(results));}setOptions(newOptions);}});return function(){active=false;};},[value,inputValue,fetch]);return/*#__PURE__*/React.createElement(Autocomplete,{id:\"google-map-demo\",style:{width:300},getOptionLabel:function getOptionLabel(option){return typeof option==='string'?option:option.description;},filterOptions:function filterOptions(x){return x;},options:options,autoComplete:true,includeInputInList:true,filterSelectedOptions:true,value:value,onChange:function onChange(event,newValue){setOptions(newValue?[newValue].concat(_toConsumableArray(options)):options);setValue(newValue);},onInputChange:function onInputChange(event,newInputValue){setInputValue(newInputValue);},renderInput:function renderInput(params){return/*#__PURE__*/React.createElement(TextField,Object.assign({},params,{label:\"Find city\\u2026\",variant:\"outlined\",fullWidth:true}));},renderOption:function renderOption(option){var matches=option.structured_formatting.main_text_matched_substrings;var parts=parse(option.structured_formatting.main_text,matches.map(function(match){return[match.offset,match.offset+match.length];}));return/*#__PURE__*/React.createElement(Grid,{container:true,alignItems:\"center\"},/*#__PURE__*/React.createElement(Grid,{item:true},/*#__PURE__*/React.createElement(LocationOnIcon,{className:classes.icon})),/*#__PURE__*/React.createElement(Grid,{item:true,xs:true},parts.map(function(part,index){return/*#__PURE__*/React.createElement(\"span\",{key:index,style:{fontWeight:part.highlight?700:400}},part.text);}),/*#__PURE__*/React.createElement(Typography,{variant:\"body2\",color:\"textSecondary\"},option.structured_formatting.secondary_text)));}});}","map":{"version":3,"sources":["C:/dev/react/weather_spa/src/components/elementary/Autocomplete.js"],"names":["React","useState","useEffect","useRef","useMemo","useDispatch","TextField","Autocomplete","LocationOnIcon","Grid","Typography","makeStyles","parse","throttle","dropWeather","getCityCoordinatesByName","loadScript","src","position","id","script","document","createElement","setAttribute","appendChild","autocompleteService","current","useStyles","theme","icon","color","palette","text","secondary","marginRight","spacing","GoogleMaps","classes","dispatch","value","setValue","inputValue","setInputValue","options","setOptions","loaded","window","querySelector","process","env","REACT_APP_GOOGLE_API_KEY","fetch","request","callback","getPlacePredictions","description","active","google","maps","places","AutocompleteService","undefined","input","results","filter","result","types","some","type","newOptions","width","option","x","event","newValue","newInputValue","params","matches","structured_formatting","main_text_matched_substrings","parts","main_text","map","match","offset","length","part","index","fontWeight","highlight","secondary_text"],"mappings":"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","sourcesContent":["import React, {useState,useEffect, useRef, useMemo} from 'react';\r\nimport {useDispatch} from \"react-redux\";\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport LocationOnIcon from '@material-ui/icons/LocationOn';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport parse from 'autosuggest-highlight/parse';\r\nimport throttle from 'lodash/throttle';\r\nimport {dropWeather} from \"../../redux/actions/weatherActions\";\r\nimport {getCityCoordinatesByName} from '../../redux/appThunk'\r\n\r\nfunction loadScript(src, position, id) {\r\n    if (!position) {\r\n        return;\r\n    }\r\n\r\n    const script = document.createElement('script');\r\n    script.setAttribute('async', '');\r\n    script.setAttribute('id', id);\r\n    script.src = src;\r\n    position.appendChild(script);\r\n}\r\n\r\nconst autocompleteService = { current: null };\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    icon: {\r\n        color: theme.palette.text.secondary,\r\n        marginRight: theme.spacing(2),\r\n    },\r\n}));\r\n\r\nexport default function GoogleMaps() {\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch();\r\n    const [value, setValue] = useState(null);\r\n    const [inputValue, setInputValue] = useState('');\r\n    const [options, setOptions] = useState([]);\r\n    const loaded = useRef(false);\r\n\r\n\r\n    if (typeof window !== 'undefined' && !loaded.current) {\r\n        if (!document.querySelector('#google-maps')) {\r\n            loadScript(\r\n                `https://maps.googleapis.com/maps/api/js?key=${process.env.REACT_APP_GOOGLE_API_KEY}&libraries=places&types=(cities)`,\r\n                document.querySelector('head'),\r\n                'google-maps',\r\n            );\r\n        }\r\n        loaded.current = true;\r\n    }\r\n\r\n    const fetch = useMemo(\r\n        () =>\r\n            throttle((request, callback) => {\r\n                autocompleteService.current.getPlacePredictions(request, callback);\r\n            }, 200),\r\n        [],\r\n    );\r\n\r\n    useEffect(()=> {\r\n        if (value) {\r\n            dispatch(getCityCoordinatesByName(value.description));\r\n            dispatch(dropWeather());\r\n            setValue('');\r\n        }\r\n    },[value])\r\n\r\n    useEffect(() => {\r\n        let active = true;\r\n\r\n        if (!autocompleteService.current && window.google) {\r\n            autocompleteService.current = new window.google.maps.places.AutocompleteService();\r\n        }\r\n        if (!autocompleteService.current) {\r\n            return undefined;\r\n        }\r\n\r\n        if (inputValue === '') {\r\n            setOptions(value ? [value] : []);\r\n            return undefined;\r\n        }\r\n\r\n        fetch({ input: inputValue }, (results) => {\r\n            if (results != null) {\r\n            results = results.filter( result => result.types.some(type => type ===\"locality\"))\r\n            }\r\n            if (active) {\r\n                let newOptions = [];\r\n\r\n                if (value) {\r\n                    newOptions = [value];\r\n                }\r\n\r\n                if (results) {\r\n                    newOptions = [...newOptions, ...results];\r\n                }\r\n\r\n                setOptions(newOptions);\r\n            }\r\n        });\r\n\r\n        return () => {\r\n            active = false;\r\n        };\r\n    }, [value, inputValue, fetch]);\r\n\r\n    return (\r\n        <Autocomplete\r\n            id=\"google-map-demo\"\r\n            style={{ width: 300 }}\r\n            getOptionLabel={(option) => typeof option === 'string' ? option : option.description }\r\n            filterOptions={(x) => x}\r\n            options={options}\r\n            autoComplete\r\n            includeInputInList\r\n            filterSelectedOptions\r\n            value={value}\r\n            onChange={(event, newValue) => {\r\n                setOptions(newValue ? [newValue, ...options] : options);\r\n                setValue(newValue);\r\n            }}\r\n            onInputChange={(event, newInputValue) => {\r\n                setInputValue(newInputValue);\r\n            }}\r\n            renderInput={(params) => (\r\n                <TextField {...params} label=\"Find city…\" variant=\"outlined\" fullWidth />\r\n            )}\r\n            renderOption={(option) => {\r\n                const matches = option.structured_formatting.main_text_matched_substrings;\r\n                const parts = parse(\r\n                    option.structured_formatting.main_text,\r\n                    matches.map((match) => [match.offset, match.offset + match.length]),\r\n                );\r\n\r\n                return (\r\n                    <Grid container alignItems=\"center\">\r\n                        <Grid item>\r\n                            <LocationOnIcon className={classes.icon} />\r\n                        </Grid>\r\n                        <Grid item xs>\r\n                            {parts.map((part, index) => (\r\n                                <span key={index} style={{ fontWeight: part.highlight ? 700 : 400 }}>\r\n                  {part.text}\r\n                </span>\r\n                            ))}\r\n\r\n                            <Typography variant=\"body2\" color=\"textSecondary\">\r\n                                {option.structured_formatting.secondary_text}\r\n                            </Typography>\r\n                        </Grid>\r\n                    </Grid>\r\n                );\r\n            }}\r\n        />\r\n    );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}