{"ast":null,"code":"var _jsxFileName = \"C:\\\\dev\\\\react\\\\weather_spa\\\\src\\\\components\\\\Forecast.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport Gmap from \"./Gmap\";\nimport Card from \"@material-ui/core/Card\";\nimport Moment from 'moment';\nimport { CardContent, Grid, Typography } from \"@material-ui/core\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport { ForecastCard } from \"./elementary/ForecastCard\";\nimport { Container } from '@material-ui/core';\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1\n  }\n}));\nexport function Forecast(props) {\n  _s();\n\n  const classes = useStyles();\n  const forecastItems = props.hasFetched ? props.weather.daily.map((day, index) => /*#__PURE__*/React.createElement(ForecastCard, Object.assign({\n    key: index + 1000\n  }, day, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 49\n    }\n  }))) : null;\n  let forecastHours = props.hasFetched && props.forecastPeriod < 7 ? props.weather.hourly.map(forecast => {\n    if (Moment.unix(forecast.dt).format('DD') === Moment().add(props.forecastPeriod - 1, 'days').format('DD') && Moment.unix(forecast.dt).format('HH') % 6 === 0) {\n      return /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        key: forecast.dt,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(Typography, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 25\n        }\n      }, Moment.unix(forecast.dt).format('HH:mm '), Math.floor(forecast.temp - 273.15, 1), \"\\xB0C Wind \", forecast.wind_speed, \" meters per second\"));\n    }\n  }) : null;\n  const typeForecast = props.hasFetched && props.forecastPeriod < 7 ? /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 17\n    }\n  }, Moment().add(props.forecastPeriod - 1, 'days').calendar(null, {\n    sameDay: '[Today]',\n    nextDay: '[Tomorrow]',\n    nextWeek: 'dddd',\n    sameElse: 'L'\n  }))), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 17\n    }\n  }, Moment().add(props.forecastPeriod - 1, 'days').format('MMMM, DD'))), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 17\n    }\n  }, \"Time Weather\")), forecastHours) : /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    spacing: 2,\n    justify: \"flex-start\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }\n  }, props.forecastPeriod < 7 ? null : forecastItems));\n  return /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    spacing: 2,\n    justify: \"space-between\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }\n  }, typeForecast, props.forecastPeriod < 7 ? /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 8,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Gmap, Object.assign({}, props.actualLocation, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 21\n    }\n  }))) : null);\n}\n\n_s(Forecast, \"8g5FPXexvSEOsxdmU7HicukHGqY=\", false, function () {\n  return [useStyles];\n});\n\n_c = Forecast;\n\nvar _c;\n\n$RefreshReg$(_c, \"Forecast\");","map":{"version":3,"sources":["C:/dev/react/weather_spa/src/components/Forecast.js"],"names":["React","useEffect","useState","Gmap","Card","Moment","CardContent","Grid","Typography","makeStyles","ForecastCard","Container","useStyles","theme","root","flexGrow","Forecast","props","classes","forecastItems","hasFetched","weather","daily","map","day","index","forecastHours","forecastPeriod","hourly","forecast","unix","dt","format","add","Math","floor","temp","wind_speed","typeForecast","calendar","sameDay","nextDay","nextWeek","sameElse","actualLocation"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react';\r\nimport Gmap from \"./Gmap\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport Moment from 'moment';\r\nimport {CardContent, Grid, Typography} from \"@material-ui/core\";\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport {ForecastCard} from \"./elementary/ForecastCard\";\r\nimport { Container } from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n    },\r\n}));\r\n\r\nexport function Forecast(props) {\r\n    const classes = useStyles();\r\n\r\n    const forecastItems = (props.hasFetched) ? (\r\n        props.weather.daily.map((day, index) => <ForecastCard key={index + 1000} {...day}/>)\r\n    ) : null;\r\n\r\n\r\n    let forecastHours = (props.hasFetched && props.forecastPeriod < 7) ? (\r\n        props.weather.hourly.map(forecast => {\r\n            if (Moment.unix(forecast.dt).format('DD') === Moment().add(props.forecastPeriod - 1, 'days').format('DD') &&\r\n                Moment.unix(forecast.dt).format('HH') % 6 === 0) {\r\n                return (\r\n                    <Grid item key={forecast.dt}>\r\n                        <Typography>\r\n                            {Moment.unix(forecast.dt).format('HH:mm ')}\r\n                            {Math.floor(forecast.temp - 273.15, 1)}Â°C\r\n                            Wind {forecast.wind_speed} meters per second\r\n                        </Typography>\r\n                    </Grid>\r\n                )\r\n            }\r\n        })\r\n    ) : null;\r\n\r\n    const typeForecast = (props.hasFetched && props.forecastPeriod < 7) ? (\r\n        <Grid item>\r\n            {/*<Grid container spacing={2} direction='column' justify=\"flex-start\">*/}\r\n            <Grid item>\r\n                <Typography>\r\n                    {Moment().add(props.forecastPeriod - 1, 'days').calendar(null, {\r\n                        sameDay: '[Today]',\r\n                        nextDay: '[Tomorrow]',\r\n                        nextWeek: 'dddd',\r\n                        sameElse: 'L'\r\n                    })}\r\n                </Typography>\r\n            </Grid>\r\n            <Grid item>\r\n                <Typography>\r\n                    {Moment().add(props.forecastPeriod - 1, 'days').format('MMMM, DD')}\r\n                </Typography>\r\n            </Grid>\r\n            <Grid item>\r\n                <Typography>\r\n                    Time Weather\r\n                </Typography>\r\n            </Grid>\r\n            {forecastHours}\r\n            {/*</Grid>*/}\r\n        </Grid>\r\n    ) : (\r\n        <Grid item>\r\n            <Grid container spacing={2} justify=\"flex-start\">\r\n                {(props.forecastPeriod < 7) ? null : forecastItems}\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n\r\n    return (\r\n        <Grid container spacing={2}\r\n              justify=\"space-between\"\r\n        >\r\n            {typeForecast}\r\n            {/*<Grid item>*/}\r\n            {/*        <Grid item>Time Weather</Grid>*/}\r\n            {/*        <Grid item>00:00 6Â°C Wind 5.75 meters per second</Grid>*/}\r\n            {/*        <Grid item>06:00 5Â°C Wind 5.32 meters per second</Grid>*/}\r\n            {/*        <Grid item>12:00 4Â°C Wind 4.68 meters per second</Grid>*/}\r\n            {/*        <Grid item>00:00 6Â°C Wind 5.75 meters per second</Grid>*/}\r\n            {/*        <Grid item>06:00 5Â°C Wind 5.32 meters per second</Grid>*/}\r\n            {/*    <Grid item>00:00 6Â°C Wind 5.75 meters per second</Grid>*/}\r\n            {/*    <Grid item>06:00 5Â°C Wind 5.32 meters per second</Grid>*/}\r\n            {/*    <Grid item>12:00 4Â°C Wind 4.68 meters per second</Grid>*/}\r\n            {/*    <Grid item>00:00 6Â°C Wind 5.75 meters per second</Grid>*/}\r\n            {/*    <Grid item>06:00 5Â°C Wind 5.32 meters per second</Grid>*/}\r\n            {/*    /!*<Grid container*!/*/}\r\n            {/*    /!*      // direction='column'*!/*/}\r\n            {/*    /!*>*!/*/}\r\n            {/*    /!*    <Grid item>Tomorrow</Grid>*!/*/}\r\n            {/*    /!*    <Grid item>November, 29</Grid>*!/*/}\r\n\r\n\r\n\r\n            {/*    /!*</Grid>*!/*/}\r\n            {/*</Grid>*/}\r\n\r\n\r\n            {(props.forecastPeriod < 7) ?\r\n                <Grid item xs={8}>\r\n                    <Gmap {...props.actualLocation}/>\r\n                </Grid>\r\n                : null}\r\n        </Grid>\r\n    );\r\n}"]},"metadata":{},"sourceType":"module"}