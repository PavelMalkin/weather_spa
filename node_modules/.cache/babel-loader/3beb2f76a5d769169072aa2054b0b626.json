{"ast":null,"code":"var _jsxFileName = \"C:\\\\dev\\\\react\\\\weather_spa\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { getCurrentLocation, getCurrentWeather } from './redux/appThunk';\nimport Navbar from './components/Navbar';\nimport SavedCities from \"./components/SavedCities\";\nimport Main from \"./components/Main\";\nimport { makeStyles } from '@material-ui/core/styles';\nconst useStyles = makeStyles(theme => ({\n  root: {\n    // display: 'flex',\n    // flexWrap: 'wrap',\n    '& > *': {\n      margin: theme.spacing(1) // width: theme.spacing(16),\n      // height: theme.spacing(16),\n\n    }\n  }\n}));\n\nfunction App() {\n  _s();\n\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const location = useSelector(store => store.location);\n  const currentWeather = useSelector(store => store.currentWeather);\n  useEffect(() => {\n    if (!location.hasFetched && !location.isFetching) {\n      dispatch(getCurrentLocation());\n    }\n  }, [location]);\n  useEffect(() => {\n    if (!currentWeather.hasFetched && !currentWeather.isFetchingError && !currentWeather.isFetching && location.hasFetched) {\n      dispatch(getCurrentWeather(location.actualLocation));\n    }\n  }, [currentWeather, location]);\n  useEffect(() => {\n    if (!currentWeather.hasFetched && !currentWeather.isFetchingError && !currentWeather.isFetching && location.hasFetched) {\n      dispatch(getCurrentWeather(location.actualLocation));\n    }\n  }, [currentWeather, location]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Navbar, Object.assign({}, location, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(Main, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(SavedCities, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }\n  })));\n}\n\n_s(App, \"xfTzztoO3oAIbwu5nITHT5mkIh8=\", false, function () {\n  return [useStyles, useDispatch, useSelector, useSelector];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/dev/react/weather_spa/src/App.js"],"names":["React","useEffect","useSelector","useDispatch","getCurrentLocation","getCurrentWeather","Navbar","SavedCities","Main","makeStyles","useStyles","theme","root","margin","spacing","App","classes","dispatch","location","store","currentWeather","hasFetched","isFetching","isFetchingError","actualLocation"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,SAAQC,WAAR,EAAqBC,WAArB,QAAuC,aAAvC;AACA,SAAQC,kBAAR,EAA4BC,iBAA5B,QAAoD,kBAApD;AACA,OAAQC,MAAR,MAAoB,qBAApB;AACA,OAAOC,WAAP,MAAwB,0BAAxB;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AACA,SAASC,UAAT,QAA2B,0BAA3B;AAEA,MAAMC,SAAS,GAAGD,UAAU,CAAEE,KAAD,KAAY;AACrCC,EAAAA,IAAI,EAAE;AACF;AACA;AACA,aAAS;AACLC,MAAAA,MAAM,EAAEF,KAAK,CAACG,OAAN,CAAc,CAAd,CADH,CAEL;AACA;;AAHK;AAHP;AAD+B,CAAZ,CAAD,CAA5B;;AAaA,SAASC,GAAT,GAAe;AAAA;;AACX,QAAMC,OAAO,GAAGN,SAAS,EAAzB;AACA,QAAMO,QAAQ,GAAGd,WAAW,EAA5B;AACA,QAAMe,QAAQ,GAAGhB,WAAW,CAACiB,KAAK,IAAIA,KAAK,CAACD,QAAhB,CAA5B;AACA,QAAME,cAAc,GAAGlB,WAAW,CAACiB,KAAK,IAAIA,KAAK,CAACC,cAAhB,CAAlC;AAEAnB,EAAAA,SAAS,CAAC,MAAK;AACX,QAAI,CAACiB,QAAQ,CAACG,UAAV,IAAwB,CAACH,QAAQ,CAACI,UAAtC,EAAkD;AAC9CL,MAAAA,QAAQ,CAACb,kBAAkB,EAAnB,CAAR;AACH;AACJ,GAJQ,EAIP,CAACc,QAAD,CAJO,CAAT;AAMAjB,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAI,CAACmB,cAAc,CAACC,UAAhB,IAA8B,CAACD,cAAc,CAACG,eAA9C,IAAiE,CAACH,cAAc,CAACE,UAAjF,IAA+FJ,QAAQ,CAACG,UAA5G,EAAwH;AACpHJ,MAAAA,QAAQ,CAACZ,iBAAiB,CAACa,QAAQ,CAACM,cAAV,CAAlB,CAAR;AACH;AACJ,GAJQ,EAIN,CAACJ,cAAD,EAAiBF,QAAjB,CAJM,CAAT;AAMAjB,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAI,CAACmB,cAAc,CAACC,UAAhB,IAA8B,CAACD,cAAc,CAACG,eAA9C,IAAiE,CAACH,cAAc,CAACE,UAAjF,IAA+FJ,QAAQ,CAACG,UAA5G,EAAwH;AACpHJ,MAAAA,QAAQ,CAACZ,iBAAiB,CAACa,QAAQ,CAACM,cAAV,CAAlB,CAAR;AACH;AACJ,GAJQ,EAIN,CAACJ,cAAD,EAAiBF,QAAjB,CAJM,CAAT;AAOF,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAK,IAAA,SAAS,EAAEF,OAAO,CAACJ,IAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACA,oBAAC,MAAD,oBAAYM,QAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADA,eAEA,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFA,eAGA,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHA,CADJ,CADF;AASD;;GAlCQH,G;UACWL,S,EACCP,W,EACAD,W,EACMA,W;;;KAJlBa,G;AAoCT,eAAeA,GAAf","sourcesContent":["import React, {useEffect} from 'react';\r\nimport {useSelector, useDispatch} from \"react-redux\";\r\nimport {getCurrentLocation, getCurrentWeather} from './redux/appThunk'\r\nimport  Navbar from './components/Navbar'\r\nimport SavedCities from \"./components/SavedCities\";\r\nimport Main from \"./components/Main\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        // display: 'flex',\r\n        // flexWrap: 'wrap',\r\n        '& > *': {\r\n            margin: theme.spacing(1),\r\n            // width: theme.spacing(16),\r\n            // height: theme.spacing(16),\r\n        },\r\n    },\r\n}));\r\n\r\n\r\nfunction App() {\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch();\r\n    const location = useSelector(store => store.location);\r\n    const currentWeather = useSelector(store => store.currentWeather);\r\n\r\n    useEffect(()=> {\r\n        if (!location.hasFetched && !location.isFetching) {\r\n            dispatch(getCurrentLocation())\r\n        }\r\n    },[location]);\r\n\r\n    useEffect(() => {\r\n        if (!currentWeather.hasFetched && !currentWeather.isFetchingError && !currentWeather.isFetching && location.hasFetched) {\r\n            dispatch(getCurrentWeather(location.actualLocation))\r\n        }\r\n    }, [currentWeather, location]);\r\n\r\n    useEffect(() => {\r\n        if (!currentWeather.hasFetched && !currentWeather.isFetchingError && !currentWeather.isFetching && location.hasFetched) {\r\n            dispatch(getCurrentWeather(location.actualLocation))\r\n        }\r\n    }, [currentWeather, location]);\r\n\r\n\r\n  return (\r\n    <div className=\"App\">\r\n        <div className={classes.root}>\r\n        <Navbar {...location}/>\r\n        <Main/>\r\n        <SavedCities/>\r\n        </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}