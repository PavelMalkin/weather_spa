{"ast":null,"code":"var _jsxFileName = \"C:\\\\dev\\\\react\\\\weather_spa\\\\src\\\\components\\\\Forecast.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport Gmap from \"./Gmap\";\nimport Card from \"@material-ui/core/Card\";\nimport Moment from 'moment';\nimport { CardContent, Grid, Typography } from \"@material-ui/core\";\nimport { ForecastItems } from \"./elementary/ForecastItems\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport { ForecastCard } from \"./elementary/ForecastCard\";\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1\n  }\n}));\nexport function Forecast(props) {\n  _s();\n\n  const classes = useStyles();\n  const [forecastHours, setForecastHours] = useState('');\n  console.log('props in forecast', props);\n  const forecastItems = props.hasFetched ? props.weather.daily.map((day, index) => /*#__PURE__*/React.createElement(ForecastCard, Object.assign({\n    key: index + 1000\n  }, day, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 49\n    }\n  }))) : null;\n  useEffect(() => {\n    if (props.hasFetched && props.forecastPeriod < 7) {\n      setForecastHours(props.weather.hourly.map(forecast => {\n        if (Moment.unix(forecast.dt).format('DD') === Moment().add(props.forecastPeriod - 1, 'days').format('DD') && Moment.unix(forecast.dt).format('HH') % 6 === 0) {\n          return /*#__PURE__*/React.createElement(Grid, {\n            item: true,\n            key: forecast.dt,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 33,\n              columnNumber: 29\n            }\n          }, /*#__PURE__*/React.createElement(Typography, {\n            align: \"flex-start\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 34,\n              columnNumber: 33\n            }\n          }, Moment.unix(forecast.dt).format('HH:mm DD '), Math.floor(forecast.temp - 273.15, 1), \"\\xB0C Wind \", forecast.wind_speed, \" meters per second\"));\n        }\n      }));\n    }\n  }, [props]);\n  console.log('fired?', forecastHours); // let forecastHours = (props.hasFetched && props.forecastPeriod < 7) ? (\n  //     props.weather.hourly.map(forecast => {\n  //         if (Moment.unix(forecast.dt).format('DD') === Moment().add(props.weather.forecastPeriod - 1, 'days').format('DD') &&\n  //             Moment.unix(forecast.dt).format('HH') % 6 === 0) {\n  //             return (\n  //                 <Grid item key={forecast.dt}>\n  //                     <Typography align='flex-start'>\n  //                         {Moment.unix(forecast.dt).format('HH:mm ')}\n  //                         {Math.floor(forecast.temp - 273.15, 1)}Â°C\n  //                         Wind {forecast.wind_speed} meters per second\n  //                     </Typography>\n  //                 </Grid>\n  //             )\n  //         }\n  //     })\n  // ) : null;\n\n  const typeForecast = props.hasFetched && props.forecastPeriod < 7 ? /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    spacing: 3,\n    direction: \"column\",\n    justify: \"space-between\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 21\n    }\n  }, Moment().add(props.forecastPeriod - 1, 'days').calendar(null, {\n    sameDay: '[Today]',\n    nextDay: '[Tomorrow]',\n    nextWeek: 'dddd',\n    sameElse: 'L'\n  }))), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 21\n    }\n  }, Moment().add(props.forecastPeriod - 1, 'days').format('MMMM, DD'))), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 21\n    }\n  }, \"Time Weather\")), forecastHours)) : /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    spacing: 2,\n    justify: \"flex-start\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }\n  }, props.forecastPeriod < 7 ? null : forecastItems);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    spacing: 2,\n    wrap: \"wrap\",\n    justify: \"space-between\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }\n  }, typeForecast, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 8,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 17\n    }\n  }, props.forecastPeriod < 7 ? /*#__PURE__*/React.createElement(Gmap, Object.assign({}, props.actualLocation, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 51\n    }\n  })) : null)));\n}\n\n_s(Forecast, \"rxkg87u2HP4cAO2iIf+OXtGKrxo=\", false, function () {\n  return [useStyles];\n});\n\n_c = Forecast;\n\nvar _c;\n\n$RefreshReg$(_c, \"Forecast\");","map":{"version":3,"sources":["C:/dev/react/weather_spa/src/components/Forecast.js"],"names":["React","useEffect","useState","Gmap","Card","Moment","CardContent","Grid","Typography","ForecastItems","makeStyles","ForecastCard","useStyles","theme","root","flexGrow","Forecast","props","classes","forecastHours","setForecastHours","console","log","forecastItems","hasFetched","weather","daily","map","day","index","forecastPeriod","hourly","forecast","unix","dt","format","add","Math","floor","temp","wind_speed","typeForecast","calendar","sameDay","nextDay","nextWeek","sameElse","actualLocation"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react';\r\nimport Gmap from \"./Gmap\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport Moment from 'moment';\r\nimport {CardContent, Grid, Typography} from \"@material-ui/core\";\r\nimport {ForecastItems} from \"./elementary/ForecastItems\";\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport {ForecastCard} from \"./elementary/ForecastCard\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n    },\r\n}));\r\n\r\nexport function Forecast(props) {\r\n    const classes = useStyles();\r\n    const [forecastHours, setForecastHours] = useState('');\r\n\r\n    console.log('props in forecast', props);\r\n\r\n    const forecastItems = (props.hasFetched) ? (\r\n        props.weather.daily.map((day, index) => <ForecastCard key={index + 1000} {...day}/>)\r\n    ) : null;\r\n\r\n    useEffect(()=> {\r\n        if (props.hasFetched && props.forecastPeriod < 7) {\r\n\r\n            setForecastHours(props.weather.hourly.map(forecast => {\r\n                    if (Moment.unix(forecast.dt).format('DD') === Moment().add(props.forecastPeriod - 1, 'days').format('DD') &&\r\n                        Moment.unix(forecast.dt).format('HH') % 6 === 0) {\r\n                        return (\r\n                            <Grid item key={forecast.dt}>\r\n                                <Typography align='flex-start'>\r\n                                    {Moment.unix(forecast.dt).format('HH:mm DD ')}\r\n                                    {Math.floor(forecast.temp - 273.15, 1)}Â°C\r\n                                    Wind {forecast.wind_speed} meters per second\r\n                                </Typography>\r\n                            </Grid>\r\n                        )\r\n                    }\r\n                }) )\r\n        }\r\n    },[props])\r\n    console.log('fired?',forecastHours)\r\n\r\n\r\n    // let forecastHours = (props.hasFetched && props.forecastPeriod < 7) ? (\r\n    //     props.weather.hourly.map(forecast => {\r\n    //         if (Moment.unix(forecast.dt).format('DD') === Moment().add(props.weather.forecastPeriod - 1, 'days').format('DD') &&\r\n    //             Moment.unix(forecast.dt).format('HH') % 6 === 0) {\r\n    //             return (\r\n    //                 <Grid item key={forecast.dt}>\r\n    //                     <Typography align='flex-start'>\r\n    //                         {Moment.unix(forecast.dt).format('HH:mm ')}\r\n    //                         {Math.floor(forecast.temp - 273.15, 1)}Â°C\r\n    //                         Wind {forecast.wind_speed} meters per second\r\n    //                     </Typography>\r\n    //                 </Grid>\r\n    //             )\r\n    //         }\r\n    //     })\r\n    // ) : null;\r\n\r\n    const typeForecast = (props.hasFetched && props.forecastPeriod < 7) ? (\r\n        <Grid item xs={4}>\r\n            <Grid container spacing={3} direction='column' justify=\"space-between\">\r\n                <Grid item>\r\n                    <Typography>\r\n                        {Moment().add(props.forecastPeriod - 1, 'days').calendar(null, {\r\n                            sameDay: '[Today]',\r\n                            nextDay: '[Tomorrow]',\r\n                            nextWeek: 'dddd',\r\n                            sameElse: 'L'\r\n                        })}\r\n                    </Typography>\r\n                </Grid>\r\n                <Grid item>\r\n                    <Typography>\r\n                        {Moment().add(props.forecastPeriod - 1, 'days').format('MMMM, DD')}\r\n                    </Typography>\r\n                </Grid>\r\n                <Grid item>\r\n                    <Typography>\r\n                        Time Weather\r\n                    </Typography>\r\n                </Grid>\r\n                {forecastHours}\r\n            </Grid>\r\n        </Grid>\r\n    ) : (\r\n        <Grid container spacing={2} justify=\"flex-start\">\r\n            {(props.forecastPeriod < 7) ? null : forecastItems}\r\n        </Grid>\r\n    );\r\n\r\n    return (\r\n        <div>\r\n            <Grid container spacing={2} wrap='wrap'\r\n                  justify=\"space-between\">\r\n                {typeForecast}\r\n                <Grid item xs={8}>\r\n                    {(props.forecastPeriod < 7) ? <Gmap {...props.actualLocation}/> : null}\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n    );\r\n}"]},"metadata":{},"sourceType":"module"}