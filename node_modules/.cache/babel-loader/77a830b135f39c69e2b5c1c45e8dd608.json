{"ast":null,"code":"var _jsxFileName = \"C:\\\\dev\\\\react\\\\weather_spa\\\\src\\\\components\\\\Autocomplete.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef, useMemo } from 'react';\nimport { useDispatch } from \"react-redux\";\nimport { setCurrentCity } from \"../redux/actions/citiesActions\";\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport LocationOnIcon from '@material-ui/icons/LocationOn';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport parse from 'autosuggest-highlight/parse';\nimport throttle from 'lodash/throttle';\n\nfunction loadScript(src, position, id) {\n  if (!position) {\n    return;\n  }\n\n  const script = document.createElement('script');\n  script.setAttribute('async', '');\n  script.setAttribute('id', id);\n  script.src = src;\n  position.appendChild(script);\n}\n\nconst autocompleteService = {\n  current: null\n};\nconst useStyles = makeStyles(theme => ({\n  icon: {\n    color: theme.palette.text.secondary,\n    marginRight: theme.spacing(2)\n  }\n}));\nexport default function GoogleMaps() {\n  _s();\n\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const [value, setValue] = useState(null);\n  const [inputValue, setInputValue] = useState('');\n  const [options, setOptions] = useState([]);\n  const loaded = useRef(false);\n\n  if (typeof window !== 'undefined' && !loaded.current) {\n    if (!document.querySelector('#google-maps')) {\n      loadScript(`https://maps.googleapis.com/maps/api/js?key=${process.env.REACT_APP_GOOGLE_API_KEY}&libraries=places&types=(cities)`, document.querySelector('head'), 'google-maps');\n    }\n\n    loaded.current = true;\n  }\n\n  const fetch = useMemo(() => throttle((request, callback) => {\n    autocompleteService.current.getPlacePredictions(request, callback);\n  }, 200), []);\n  useEffect(() => {\n    if (value) {\n      dispatch(setCurrentCity(value));\n    }\n  }, [value]);\n  useEffect(() => {\n    let active = true;\n\n    if (!autocompleteService.current && window.google) {\n      autocompleteService.current = new window.google.maps.places.AutocompleteService();\n    }\n\n    if (!autocompleteService.current) {\n      return undefined;\n    }\n\n    if (inputValue === '') {\n      setOptions(value ? [value] : []);\n      return undefined;\n    }\n\n    fetch({\n      input: inputValue\n    }, results => {\n      console.log('result', results); // results = results.filter( result => result.types.some(type => type ===\"locality\"))\n\n      if (active) {\n        let newOptions = [];\n\n        if (value) {\n          newOptions = [value];\n        }\n\n        if (results) {\n          newOptions = [...newOptions, ...results];\n        }\n\n        setOptions(newOptions);\n      }\n    });\n    return () => {\n      active = false;\n    };\n  }, [value, inputValue, fetch]);\n  return /*#__PURE__*/React.createElement(Autocomplete, {\n    id: \"google-map-demo\",\n    style: {\n      width: 300\n    },\n    getOptionLabel: option => {\n      console.log('option', option);\n      return typeof option === 'string' ? option : option.description;\n    },\n    filterOptions: x => x,\n    options: options,\n    autoComplete: true,\n    includeInputInList: true,\n    filterSelectedOptions: true,\n    value: value,\n    onChange: (event, newValue) => {\n      setOptions(newValue ? [newValue, ...options] : options);\n      setValue(newValue);\n    },\n    onInputChange: (event, newInputValue) => {\n      setInputValue(newInputValue);\n    },\n    renderInput: params => /*#__PURE__*/React.createElement(TextField, Object.assign({}, params, {\n      label: \"Find city\\u2026\",\n      variant: \"outlined\",\n      fullWidth: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 17\n      }\n    })),\n    renderOption: option => {\n      const matches = option.structured_formatting.main_text_matched_substrings;\n      const parts = parse(option.structured_formatting.main_text, matches.map(match => [match.offset, match.offset + match.length]));\n      return /*#__PURE__*/React.createElement(Grid, {\n        container: true,\n        alignItems: \"center\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(LocationOnIcon, {\n        className: classes.icon,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 29\n        }\n      })), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        xs: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 25\n        }\n      }, parts.map((part, index) => /*#__PURE__*/React.createElement(\"span\", {\n        key: index,\n        style: {\n          fontWeight: part.highlight ? 700 : 400\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 33\n        }\n      }, part.text)), /*#__PURE__*/React.createElement(Typography, {\n        variant: \"body2\",\n        color: \"textSecondary\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 29\n        }\n      }, option.structured_formatting.secondary_text)));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 9\n    }\n  });\n}\n\n_s(GoogleMaps, \"pxfpU7p2pcrGzggx/fjoS1Fw+iE=\", false, function () {\n  return [useStyles, useDispatch];\n});\n\n_c = GoogleMaps;\n\nvar _c;\n\n$RefreshReg$(_c, \"GoogleMaps\");","map":{"version":3,"sources":["C:/dev/react/weather_spa/src/components/Autocomplete.js"],"names":["React","useState","useEffect","useRef","useMemo","useDispatch","setCurrentCity","TextField","Autocomplete","LocationOnIcon","Grid","Typography","makeStyles","parse","throttle","loadScript","src","position","id","script","document","createElement","setAttribute","appendChild","autocompleteService","current","useStyles","theme","icon","color","palette","text","secondary","marginRight","spacing","GoogleMaps","classes","dispatch","value","setValue","inputValue","setInputValue","options","setOptions","loaded","window","querySelector","process","env","REACT_APP_GOOGLE_API_KEY","fetch","request","callback","getPlacePredictions","active","google","maps","places","AutocompleteService","undefined","input","results","console","log","newOptions","width","option","description","x","event","newValue","newInputValue","params","matches","structured_formatting","main_text_matched_substrings","parts","main_text","map","match","offset","length","part","index","fontWeight","highlight","secondary_text"],"mappings":"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","sourcesContent":["import React, {useState,useEffect, useRef, useMemo} from 'react';\r\nimport {useDispatch} from \"react-redux\";\r\nimport {setCurrentCity} from \"../redux/actions/citiesActions\";\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport LocationOnIcon from '@material-ui/icons/LocationOn';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport parse from 'autosuggest-highlight/parse';\r\nimport throttle from 'lodash/throttle';\r\n\r\nfunction loadScript(src, position, id) {\r\n    if (!position) {\r\n        return;\r\n    }\r\n\r\n    const script = document.createElement('script');\r\n    script.setAttribute('async', '');\r\n    script.setAttribute('id', id);\r\n    script.src = src;\r\n    position.appendChild(script);\r\n}\r\n\r\nconst autocompleteService = { current: null };\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    icon: {\r\n        color: theme.palette.text.secondary,\r\n        marginRight: theme.spacing(2),\r\n    },\r\n}));\r\n\r\nexport default function GoogleMaps() {\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch();\r\n    const [value, setValue] = useState(null);\r\n    const [inputValue, setInputValue] = useState('');\r\n    const [options, setOptions] = useState([]);\r\n    const loaded = useRef(false);\r\n\r\n\r\n    if (typeof window !== 'undefined' && !loaded.current) {\r\n        if (!document.querySelector('#google-maps')) {\r\n            loadScript(\r\n                `https://maps.googleapis.com/maps/api/js?key=${process.env.REACT_APP_GOOGLE_API_KEY}&libraries=places&types=(cities)`,\r\n                document.querySelector('head'),\r\n                'google-maps',\r\n            );\r\n        }\r\n        loaded.current = true;\r\n    }\r\n\r\n    const fetch = useMemo(\r\n        () =>\r\n            throttle((request, callback) => {\r\n                autocompleteService.current.getPlacePredictions(request, callback);\r\n            }, 200),\r\n        [],\r\n    );\r\n\r\n    useEffect(()=> {\r\n        if (value) {\r\n            dispatch(setCurrentCity(value))\r\n        }\r\n    },[value])\r\n\r\n    useEffect(() => {\r\n        let active = true;\r\n\r\n        if (!autocompleteService.current && window.google) {\r\n            autocompleteService.current = new window.google.maps.places.AutocompleteService();\r\n        }\r\n        if (!autocompleteService.current) {\r\n            return undefined;\r\n        }\r\n\r\n        if (inputValue === '') {\r\n            setOptions(value ? [value] : []);\r\n            return undefined;\r\n        }\r\n\r\n        fetch({ input: inputValue }, (results) => {\r\n            console.log('result', results)\r\n            // results = results.filter( result => result.types.some(type => type ===\"locality\"))\r\n            if (active) {\r\n                let newOptions = [];\r\n\r\n                if (value) {\r\n                    newOptions = [value];\r\n                }\r\n\r\n                if (results) {\r\n                    newOptions = [...newOptions, ...results];\r\n                }\r\n\r\n                setOptions(newOptions);\r\n            }\r\n        });\r\n\r\n        return () => {\r\n            active = false;\r\n        };\r\n    }, [value, inputValue, fetch]);\r\n\r\n    return (\r\n        <Autocomplete\r\n            id=\"google-map-demo\"\r\n            style={{ width: 300 }}\r\n            getOptionLabel={(option) => { console.log('option',option);   return (typeof option === 'string' ? option : option.description)} }\r\n            filterOptions={(x) => x}\r\n            options={options}\r\n            autoComplete\r\n            includeInputInList\r\n            filterSelectedOptions\r\n            value={value}\r\n            onChange={(event, newValue) => {\r\n                setOptions(newValue ? [newValue, ...options] : options);\r\n                setValue(newValue);\r\n            }}\r\n            onInputChange={(event, newInputValue) => {\r\n                setInputValue(newInputValue);\r\n            }}\r\n            renderInput={(params) => (\r\n                <TextField {...params} label=\"Find city…\" variant=\"outlined\" fullWidth />\r\n            )}\r\n            renderOption={(option) => {\r\n                const matches = option.structured_formatting.main_text_matched_substrings;\r\n                const parts = parse(\r\n                    option.structured_formatting.main_text,\r\n                    matches.map((match) => [match.offset, match.offset + match.length]),\r\n                );\r\n\r\n                return (\r\n                    <Grid container alignItems=\"center\">\r\n                        <Grid item>\r\n                            <LocationOnIcon className={classes.icon} />\r\n                        </Grid>\r\n                        <Grid item xs>\r\n                            {parts.map((part, index) => (\r\n                                <span key={index} style={{ fontWeight: part.highlight ? 700 : 400 }}>\r\n                  {part.text}\r\n                </span>\r\n                            ))}\r\n\r\n                            <Typography variant=\"body2\" color=\"textSecondary\">\r\n                                {option.structured_formatting.secondary_text}\r\n                            </Typography>\r\n                        </Grid>\r\n                    </Grid>\r\n                );\r\n            }}\r\n        />\r\n    );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}